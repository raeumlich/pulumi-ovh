// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./cloudProject";
export * from "./cloudProjectContainerRegistry";
export * from "./cloudProjectContainerRegistryUser";
export * from "./cloudProjectFailoverIPAttach";
export * from "./cloudProjectKube";
export * from "./cloudProjectKubeNodepool";
export * from "./cloudProjectNetworkPrivate";
export * from "./cloudProjectNetworkPrivateSubnet";
export * from "./cloudProjectUser";
export * from "./dbaaSLogsInput";
export * from "./dbaaSLogsOutputGraylogStream";
export * from "./dedicatedCephACL";
export * from "./dedicatedServerInstallTask";
export * from "./dedicatedServerRebootTask";
export * from "./dedicatedServerUpdate";
export * from "./domainZone";
export * from "./domainZoneRecord";
export * from "./domainZoneRedirection";
export * from "./getCloudProjectCapabilitiesContainerRegistry";
export * from "./getCloudProjectCapabilitiesContainerregistryFilter";
export * from "./getCloudProjectContainerRegistries";
export * from "./getCloudProjectContainerRegistryUsers";
export * from "./getCloudProjectContainerregistry";
export * from "./getCloudProjectFailoverIPAttach";
export * from "./getCloudProjectKube";
export * from "./getCloudProjectRegion";
export * from "./getCloudProjectRegions";
export * from "./getDBaaSLogsInputEngine";
export * from "./getDBaaSLogsOutputGraylogStream";
export * from "./getDedicatedCeph";
export * from "./getDedicatedInstallationTemplates";
export * from "./getDedicatedServer";
export * from "./getDedicatedServerBoots";
export * from "./getDedicatedServers";
export * from "./getDomainZone";
export * from "./getIPLoadBalancing";
export * from "./getIPLoadBalancingVRackNetwork";
export * from "./getIPLoadBalancingVRackNetworks";
export * from "./getIPService";
export * from "./getMe";
export * from "./getMeIPXEScript";
export * from "./getMeIPXEScripts";
export * from "./getMeIdentityUser";
export * from "./getMeIdentityUsers";
export * from "./getMeInstallationTemplate";
export * from "./getMeInstallationTemplates";
export * from "./getMePaymentMeanBankAccount";
export * from "./getMePaymentMeanCreditCard";
export * from "./getMeSSHKey";
export * from "./getMeSSHKeys";
export * from "./getOrderCart";
export * from "./getOrderCartProduct";
export * from "./getOrderCartProductOptions";
export * from "./getOrderCartProductOptionsPlan";
export * from "./getProductCartProductPlan";
export * from "./getVPS";
export * from "./getVRacks";
export * from "./iploadBalancing";
export * from "./iploadBalancingHTTPFarm";
export * from "./iploadBalancingHTTPFarmServer";
export * from "./iploadBalancingHTTPFrontend";
export * from "./iploadBalancingHTTPRoute";
export * from "./iploadBalancingHTTPRouteRule";
export * from "./iploadBalancingRefresh";
export * from "./iploadBalancingTCPFarm";
export * from "./iploadBalancingTCPFarmServer";
export * from "./iploadBalancingTCPFrontend";
export * from "./iploadBalancingTCPRoute";
export * from "./iploadBalancingTCPRouteRule";
export * from "./iploadBalancingVRackNetwork";
export * from "./ipreverse";
export * from "./ipservice";
export * from "./ipxescript";
export * from "./meIdentityUser";
export * from "./meInstallationTemplate";
export * from "./meInstallationTemplatePartitionScheme";
export * from "./meInstallationTemplatePartitionSchemeHardwareRAID";
export * from "./meInstallationTemplatePartitionSchemePartition";
export * from "./meSSHKey";
export * from "./provider";
export * from "./vrack";
export * from "./vrackCloudProject";
export * from "./vrackDedicatedServer";
export * from "./vrackDedicatedServerInterface";
export * from "./vrackIP";
export * from "./vrackIPLoadBalancing";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { CloudProject } from "./cloudProject";
import { CloudProjectContainerRegistry } from "./cloudProjectContainerRegistry";
import { CloudProjectContainerRegistryUser } from "./cloudProjectContainerRegistryUser";
import { CloudProjectFailoverIPAttach } from "./cloudProjectFailoverIPAttach";
import { CloudProjectKube } from "./cloudProjectKube";
import { CloudProjectKubeNodepool } from "./cloudProjectKubeNodepool";
import { CloudProjectNetworkPrivate } from "./cloudProjectNetworkPrivate";
import { CloudProjectNetworkPrivateSubnet } from "./cloudProjectNetworkPrivateSubnet";
import { CloudProjectUser } from "./cloudProjectUser";
import { DBaaSLogsInput } from "./dbaaSLogsInput";
import { DBaaSLogsOutputGraylogStream } from "./dbaaSLogsOutputGraylogStream";
import { DedicatedCephACL } from "./dedicatedCephACL";
import { DedicatedServerInstallTask } from "./dedicatedServerInstallTask";
import { DedicatedServerRebootTask } from "./dedicatedServerRebootTask";
import { DedicatedServerUpdate } from "./dedicatedServerUpdate";
import { DomainZone } from "./domainZone";
import { DomainZoneRecord } from "./domainZoneRecord";
import { DomainZoneRedirection } from "./domainZoneRedirection";
import { IPLoadBalancing } from "./iploadBalancing";
import { IPLoadBalancingHTTPFarm } from "./iploadBalancingHTTPFarm";
import { IPLoadBalancingHTTPFarmServer } from "./iploadBalancingHTTPFarmServer";
import { IPLoadBalancingHTTPFrontend } from "./iploadBalancingHTTPFrontend";
import { IPLoadBalancingHTTPRoute } from "./iploadBalancingHTTPRoute";
import { IPLoadBalancingHTTPRouteRule } from "./iploadBalancingHTTPRouteRule";
import { IPLoadBalancingRefresh } from "./iploadBalancingRefresh";
import { IPLoadBalancingTCPFarm } from "./iploadBalancingTCPFarm";
import { IPLoadBalancingTCPFarmServer } from "./iploadBalancingTCPFarmServer";
import { IPLoadBalancingTCPFrontend } from "./iploadBalancingTCPFrontend";
import { IPLoadBalancingTCPRoute } from "./iploadBalancingTCPRoute";
import { IPLoadBalancingTCPRouteRule } from "./iploadBalancingTCPRouteRule";
import { IPLoadBalancingVRackNetwork } from "./iploadBalancingVRackNetwork";
import { IPReverse } from "./ipreverse";
import { IPService } from "./ipservice";
import { IPXEScript } from "./ipxescript";
import { MeIdentityUser } from "./meIdentityUser";
import { MeInstallationTemplate } from "./meInstallationTemplate";
import { MeInstallationTemplatePartitionScheme } from "./meInstallationTemplatePartitionScheme";
import { MeInstallationTemplatePartitionSchemeHardwareRAID } from "./meInstallationTemplatePartitionSchemeHardwareRAID";
import { MeInstallationTemplatePartitionSchemePartition } from "./meInstallationTemplatePartitionSchemePartition";
import { MeSSHKey } from "./meSSHKey";
import { VRack } from "./vrack";
import { VRackCloudProject } from "./vrackCloudProject";
import { VRackDedicatedServer } from "./vrackDedicatedServer";
import { VRackDedicatedServerInterface } from "./vrackDedicatedServerInterface";
import { VRackIP } from "./vrackIP";
import { VRackIPLoadBalancing } from "./vrackIPLoadBalancing";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ovh:index/cloudProject:CloudProject":
                return new CloudProject(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectContainerRegistry:CloudProjectContainerRegistry":
                return new CloudProjectContainerRegistry(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectContainerRegistryUser:CloudProjectContainerRegistryUser":
                return new CloudProjectContainerRegistryUser(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectFailoverIPAttach:CloudProjectFailoverIPAttach":
                return new CloudProjectFailoverIPAttach(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectKube:CloudProjectKube":
                return new CloudProjectKube(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectKubeNodepool:CloudProjectKubeNodepool":
                return new CloudProjectKubeNodepool(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectNetworkPrivate:CloudProjectNetworkPrivate":
                return new CloudProjectNetworkPrivate(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectNetworkPrivateSubnet:CloudProjectNetworkPrivateSubnet":
                return new CloudProjectNetworkPrivateSubnet(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectUser:CloudProjectUser":
                return new CloudProjectUser(name, <any>undefined, { urn })
            case "ovh:index/dBaaSLogsInput:DBaaSLogsInput":
                return new DBaaSLogsInput(name, <any>undefined, { urn })
            case "ovh:index/dBaaSLogsOutputGraylogStream:DBaaSLogsOutputGraylogStream":
                return new DBaaSLogsOutputGraylogStream(name, <any>undefined, { urn })
            case "ovh:index/dedicatedCephACL:DedicatedCephACL":
                return new DedicatedCephACL(name, <any>undefined, { urn })
            case "ovh:index/dedicatedServerInstallTask:DedicatedServerInstallTask":
                return new DedicatedServerInstallTask(name, <any>undefined, { urn })
            case "ovh:index/dedicatedServerRebootTask:DedicatedServerRebootTask":
                return new DedicatedServerRebootTask(name, <any>undefined, { urn })
            case "ovh:index/dedicatedServerUpdate:DedicatedServerUpdate":
                return new DedicatedServerUpdate(name, <any>undefined, { urn })
            case "ovh:index/domainZone:DomainZone":
                return new DomainZone(name, <any>undefined, { urn })
            case "ovh:index/domainZoneRecord:DomainZoneRecord":
                return new DomainZoneRecord(name, <any>undefined, { urn })
            case "ovh:index/domainZoneRedirection:DomainZoneRedirection":
                return new DomainZoneRedirection(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancing:IPLoadBalancing":
                return new IPLoadBalancing(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancingHTTPFarm:IPLoadBalancingHTTPFarm":
                return new IPLoadBalancingHTTPFarm(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancingHTTPFarmServer:IPLoadBalancingHTTPFarmServer":
                return new IPLoadBalancingHTTPFarmServer(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancingHTTPFrontend:IPLoadBalancingHTTPFrontend":
                return new IPLoadBalancingHTTPFrontend(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancingHTTPRoute:IPLoadBalancingHTTPRoute":
                return new IPLoadBalancingHTTPRoute(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancingHTTPRouteRule:IPLoadBalancingHTTPRouteRule":
                return new IPLoadBalancingHTTPRouteRule(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancingRefresh:IPLoadBalancingRefresh":
                return new IPLoadBalancingRefresh(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancingTCPFarm:IPLoadBalancingTCPFarm":
                return new IPLoadBalancingTCPFarm(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancingTCPFarmServer:IPLoadBalancingTCPFarmServer":
                return new IPLoadBalancingTCPFarmServer(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancingTCPFrontend:IPLoadBalancingTCPFrontend":
                return new IPLoadBalancingTCPFrontend(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancingTCPRoute:IPLoadBalancingTCPRoute":
                return new IPLoadBalancingTCPRoute(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancingTCPRouteRule:IPLoadBalancingTCPRouteRule":
                return new IPLoadBalancingTCPRouteRule(name, <any>undefined, { urn })
            case "ovh:index/iPLoadBalancingVRackNetwork:IPLoadBalancingVRackNetwork":
                return new IPLoadBalancingVRackNetwork(name, <any>undefined, { urn })
            case "ovh:index/iPReverse:IPReverse":
                return new IPReverse(name, <any>undefined, { urn })
            case "ovh:index/iPService:IPService":
                return new IPService(name, <any>undefined, { urn })
            case "ovh:index/iPXEScript:IPXEScript":
                return new IPXEScript(name, <any>undefined, { urn })
            case "ovh:index/meIdentityUser:MeIdentityUser":
                return new MeIdentityUser(name, <any>undefined, { urn })
            case "ovh:index/meInstallationTemplate:MeInstallationTemplate":
                return new MeInstallationTemplate(name, <any>undefined, { urn })
            case "ovh:index/meInstallationTemplatePartitionScheme:MeInstallationTemplatePartitionScheme":
                return new MeInstallationTemplatePartitionScheme(name, <any>undefined, { urn })
            case "ovh:index/meInstallationTemplatePartitionSchemeHardwareRAID:MeInstallationTemplatePartitionSchemeHardwareRAID":
                return new MeInstallationTemplatePartitionSchemeHardwareRAID(name, <any>undefined, { urn })
            case "ovh:index/meInstallationTemplatePartitionSchemePartition:MeInstallationTemplatePartitionSchemePartition":
                return new MeInstallationTemplatePartitionSchemePartition(name, <any>undefined, { urn })
            case "ovh:index/meSSHKey:MeSSHKey":
                return new MeSSHKey(name, <any>undefined, { urn })
            case "ovh:index/vRack:VRack":
                return new VRack(name, <any>undefined, { urn })
            case "ovh:index/vRackCloudProject:VRackCloudProject":
                return new VRackCloudProject(name, <any>undefined, { urn })
            case "ovh:index/vRackDedicatedServer:VRackDedicatedServer":
                return new VRackDedicatedServer(name, <any>undefined, { urn })
            case "ovh:index/vRackDedicatedServerInterface:VRackDedicatedServerInterface":
                return new VRackDedicatedServerInterface(name, <any>undefined, { urn })
            case "ovh:index/vRackIP:VRackIP":
                return new VRackIP(name, <any>undefined, { urn })
            case "ovh:index/vRackIPLoadBalancing:VRackIPLoadBalancing":
                return new VRackIPLoadBalancing(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ovh", "index/cloudProject", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectContainerRegistry", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectContainerRegistryUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectFailoverIPAttach", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectKube", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectKubeNodepool", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectNetworkPrivate", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectNetworkPrivateSubnet", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dBaaSLogsInput", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dBaaSLogsOutputGraylogStream", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedCephACL", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedServerInstallTask", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedServerRebootTask", _module)
pulumi.runtime.registerResourceModule("ovh", "index/dedicatedServerUpdate", _module)
pulumi.runtime.registerResourceModule("ovh", "index/domainZone", _module)
pulumi.runtime.registerResourceModule("ovh", "index/domainZoneRecord", _module)
pulumi.runtime.registerResourceModule("ovh", "index/domainZoneRedirection", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancing", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancingHTTPFarm", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancingHTTPFarmServer", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancingHTTPFrontend", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancingHTTPRoute", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancingHTTPRouteRule", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancingRefresh", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancingTCPFarm", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancingTCPFarmServer", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancingTCPFrontend", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancingTCPRoute", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancingTCPRouteRule", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPLoadBalancingVRackNetwork", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPReverse", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPService", _module)
pulumi.runtime.registerResourceModule("ovh", "index/iPXEScript", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meIdentityUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meInstallationTemplate", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meInstallationTemplatePartitionScheme", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meInstallationTemplatePartitionSchemeHardwareRAID", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meInstallationTemplatePartitionSchemePartition", _module)
pulumi.runtime.registerResourceModule("ovh", "index/meSSHKey", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vRack", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vRackCloudProject", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vRackDedicatedServer", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vRackDedicatedServerInterface", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vRackIP", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vRackIPLoadBalancing", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("ovh", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ovh") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
