// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    /// <summary>
    /// Orders a vrack.
    /// 
    /// ## Important
    /// 
    /// This resource is in beta state. Use with caution.
    /// 
    /// __NOTE__ : Currently, the OVH api doesn't support Vrack termination. You have to open a support ticket to ask for vrack termination. Otherwise, you may hit vrack quota issues.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var mycart = Output.Create(Ovh.GetOrderCart.InvokeAsync(new Ovh.GetOrderCartArgs
    ///         {
    ///             OvhSubsidiary = "fr",
    ///             Description = "my vrack order cart",
    ///         }));
    ///         var vrackProductCartProductPlan = mycart.Apply(mycart =&gt; Output.Create(Ovh.GetProductCartProductPlan.InvokeAsync(new Ovh.GetProductCartProductPlanArgs
    ///         {
    ///             CartId = mycart.Id,
    ///             PriceCapacity = "renew",
    ///             Product = "vrack",
    ///             PlanCode = "vrack",
    ///         })));
    ///         var vrackVRack = new Ovh.VRack("vrackVRack", new Ovh.VRackArgs
    ///         {
    ///             OvhSubsidiary = mycart.Apply(mycart =&gt; mycart.OvhSubsidiary),
    ///             PaymentMean = "fidelity",
    ///             Description = "my vrack",
    ///             Plan = new Ovh.Inputs.VRackPlanArgs
    ///             {
    ///                 Duration = vrackProductCartProductPlan.Apply(vrackProductCartProductPlan =&gt; vrackProductCartProductPlan.SelectedPrices?[0]?.Duration),
    ///                 PlanCode = vrackProductCartProductPlan.Apply(vrackProductCartProductPlan =&gt; vrackProductCartProductPlan.PlanCode),
    ///                 PricingMode = vrackProductCartProductPlan.Apply(vrackProductCartProductPlan =&gt; vrackProductCartProductPlan.SelectedPrices?[0]?.PricingMode),
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [OvhResourceType("ovh:index/vRack:VRack")]
    public partial class VRack : Pulumi.CustomResource
    {
        /// <summary>
        /// yourvrackdescription
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// yourvrackname
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Details about an Order
        /// </summary>
        [Output("orders")]
        public Output<ImmutableArray<Outputs.VRackOrder>> Orders { get; private set; } = null!;

        /// <summary>
        /// Ovh Subsidiary
        /// </summary>
        [Output("ovhSubsidiary")]
        public Output<string> OvhSubsidiary { get; private set; } = null!;

        /// <summary>
        /// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
        /// </summary>
        [Output("paymentMean")]
        public Output<string> PaymentMean { get; private set; } = null!;

        /// <summary>
        /// Product Plan to order
        /// </summary>
        [Output("plan")]
        public Output<Outputs.VRackPlan> Plan { get; private set; } = null!;

        /// <summary>
        /// Product Plan to order
        /// </summary>
        [Output("planOptions")]
        public Output<ImmutableArray<Outputs.VRackPlanOption>> PlanOptions { get; private set; } = null!;

        /// <summary>
        /// The internal name of your vrack
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;


        /// <summary>
        /// Create a VRack resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VRack(string name, VRackArgs args, CustomResourceOptions? options = null)
            : base("ovh:index/vRack:VRack", name, args ?? new VRackArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VRack(string name, Input<string> id, VRackState? state = null, CustomResourceOptions? options = null)
            : base("ovh:index/vRack:VRack", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VRack resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VRack Get(string name, Input<string> id, VRackState? state = null, CustomResourceOptions? options = null)
        {
            return new VRack(name, id, state, options);
        }
    }

    public sealed class VRackArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// yourvrackdescription
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// yourvrackname
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Ovh Subsidiary
        /// </summary>
        [Input("ovhSubsidiary", required: true)]
        public Input<string> OvhSubsidiary { get; set; } = null!;

        /// <summary>
        /// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
        /// </summary>
        [Input("paymentMean", required: true)]
        public Input<string> PaymentMean { get; set; } = null!;

        /// <summary>
        /// Product Plan to order
        /// </summary>
        [Input("plan", required: true)]
        public Input<Inputs.VRackPlanArgs> Plan { get; set; } = null!;

        [Input("planOptions")]
        private InputList<Inputs.VRackPlanOptionArgs>? _planOptions;

        /// <summary>
        /// Product Plan to order
        /// </summary>
        public InputList<Inputs.VRackPlanOptionArgs> PlanOptions
        {
            get => _planOptions ?? (_planOptions = new InputList<Inputs.VRackPlanOptionArgs>());
            set => _planOptions = value;
        }

        public VRackArgs()
        {
        }
    }

    public sealed class VRackState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// yourvrackdescription
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// yourvrackname
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orders")]
        private InputList<Inputs.VRackOrderGetArgs>? _orders;

        /// <summary>
        /// Details about an Order
        /// </summary>
        public InputList<Inputs.VRackOrderGetArgs> Orders
        {
            get => _orders ?? (_orders = new InputList<Inputs.VRackOrderGetArgs>());
            set => _orders = value;
        }

        /// <summary>
        /// Ovh Subsidiary
        /// </summary>
        [Input("ovhSubsidiary")]
        public Input<string>? OvhSubsidiary { get; set; }

        /// <summary>
        /// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
        /// </summary>
        [Input("paymentMean")]
        public Input<string>? PaymentMean { get; set; }

        /// <summary>
        /// Product Plan to order
        /// </summary>
        [Input("plan")]
        public Input<Inputs.VRackPlanGetArgs>? Plan { get; set; }

        [Input("planOptions")]
        private InputList<Inputs.VRackPlanOptionGetArgs>? _planOptions;

        /// <summary>
        /// Product Plan to order
        /// </summary>
        public InputList<Inputs.VRackPlanOptionGetArgs> PlanOptions
        {
            get => _planOptions ?? (_planOptions = new InputList<Inputs.VRackPlanOptionGetArgs>());
            set => _planOptions = value;
        }

        /// <summary>
        /// The internal name of your vrack
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        public VRackState()
        {
        }
    }
}
