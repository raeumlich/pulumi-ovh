// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    /// <summary>
    /// Applies changes from other ovh_iploadbalancing_* resourcesto the production configuration of loadbalancers.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var lb = Output.Create(Ovh.GetIPLoadBalancing.InvokeAsync(new Ovh.GetIPLoadBalancingArgs
    ///         {
    ///             ServiceName = "ip-1.2.3.4",
    ///             State = "ok",
    ///         }));
    ///         var farmname = new Ovh.IPLoadBalancingTCPFarm("farmname", new Ovh.IPLoadBalancingTCPFarmArgs
    ///         {
    ///             ServiceName = lb.Apply(lb =&gt; lb.Id),
    ///             Port = 8080,
    ///             Zone = "all",
    ///         });
    ///         var backend = new Ovh.IPLoadBalancingTCPFarmServer("backend", new Ovh.IPLoadBalancingTCPFarmServerArgs
    ///         {
    ///             ServiceName = lb.Apply(lb =&gt; lb.Id),
    ///             FarmId = farmname.Id,
    ///             DisplayName = "mybackend",
    ///             Address = "4.5.6.7",
    ///             Status = "active",
    ///             Port = 80,
    ///             ProxyProtocolVersion = v2,
    ///             Weight = 2,
    ///             Probe = true,
    ///             Ssl = false,
    ///             Backup = true,
    ///         });
    ///         var mylb = new Ovh.IPLoadBalancingRefresh("mylb", new Ovh.IPLoadBalancingRefreshArgs
    ///         {
    ///             ServiceName = lb.Apply(lb =&gt; lb.Id),
    ///             Keepers = 
    ///             {
    ///                 
    ///                 {
    ///                     backend,
    ///                 }.Select(__item =&gt; __item.Address).ToList(),
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [OvhResourceType("ovh:index/iPLoadBalancingRefresh:IPLoadBalancingRefresh")]
    public partial class IPLoadBalancingRefresh : Pulumi.CustomResource
    {
        /// <summary>
        /// List of values traccked to trigger refresh, used also to form implicit dependencies
        /// </summary>
        [Output("keepers")]
        public Output<ImmutableArray<string>> Keepers { get; private set; } = null!;

        /// <summary>
        /// The internal name of your IP load balancing
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;


        /// <summary>
        /// Create a IPLoadBalancingRefresh resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IPLoadBalancingRefresh(string name, IPLoadBalancingRefreshArgs args, CustomResourceOptions? options = null)
            : base("ovh:index/iPLoadBalancingRefresh:IPLoadBalancingRefresh", name, args ?? new IPLoadBalancingRefreshArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IPLoadBalancingRefresh(string name, Input<string> id, IPLoadBalancingRefreshState? state = null, CustomResourceOptions? options = null)
            : base("ovh:index/iPLoadBalancingRefresh:IPLoadBalancingRefresh", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IPLoadBalancingRefresh resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IPLoadBalancingRefresh Get(string name, Input<string> id, IPLoadBalancingRefreshState? state = null, CustomResourceOptions? options = null)
        {
            return new IPLoadBalancingRefresh(name, id, state, options);
        }
    }

    public sealed class IPLoadBalancingRefreshArgs : Pulumi.ResourceArgs
    {
        [Input("keepers", required: true)]
        private InputList<string>? _keepers;

        /// <summary>
        /// List of values traccked to trigger refresh, used also to form implicit dependencies
        /// </summary>
        public InputList<string> Keepers
        {
            get => _keepers ?? (_keepers = new InputList<string>());
            set => _keepers = value;
        }

        /// <summary>
        /// The internal name of your IP load balancing
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public IPLoadBalancingRefreshArgs()
        {
        }
    }

    public sealed class IPLoadBalancingRefreshState : Pulumi.ResourceArgs
    {
        [Input("keepers")]
        private InputList<string>? _keepers;

        /// <summary>
        /// List of values traccked to trigger refresh, used also to form implicit dependencies
        /// </summary>
        public InputList<string> Keepers
        {
            get => _keepers ?? (_keepers = new InputList<string>());
            set => _keepers = value;
        }

        /// <summary>
        /// The internal name of your IP load balancing
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        public IPLoadBalancingRefreshState()
        {
        }
    }
}
