// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    public static class GetDBaaSLogsOutputGraylogStream
    {
        /// <summary>
        /// Use this data source to retrieve information about a DBaas logs output graylog stream.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var stream = Output.Create(Ovh.GetDBaaSLogsOutputGraylogStream.InvokeAsync(new Ovh.GetDBaaSLogsOutputGraylogStreamArgs
        ///         {
        ///             ServiceName = "XXXXXX",
        ///             Title = "my stream",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDBaaSLogsOutputGraylogStreamResult> InvokeAsync(GetDBaaSLogsOutputGraylogStreamArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDBaaSLogsOutputGraylogStreamResult>("ovh:index/getDBaaSLogsOutputGraylogStream:getDBaaSLogsOutputGraylogStream", args ?? new GetDBaaSLogsOutputGraylogStreamArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a DBaas logs output graylog stream.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var stream = Output.Create(Ovh.GetDBaaSLogsOutputGraylogStream.InvokeAsync(new Ovh.GetDBaaSLogsOutputGraylogStreamArgs
        ///         {
        ///             ServiceName = "XXXXXX",
        ///             Title = "my stream",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDBaaSLogsOutputGraylogStreamResult> Invoke(GetDBaaSLogsOutputGraylogStreamInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDBaaSLogsOutputGraylogStreamResult>("ovh:index/getDBaaSLogsOutputGraylogStream:getDBaaSLogsOutputGraylogStream", args ?? new GetDBaaSLogsOutputGraylogStreamInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDBaaSLogsOutputGraylogStreamArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The service name
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        /// <summary>
        /// Stream description
        /// </summary>
        [Input("title", required: true)]
        public string Title { get; set; } = null!;

        public GetDBaaSLogsOutputGraylogStreamArgs()
        {
        }
    }

    public sealed class GetDBaaSLogsOutputGraylogStreamInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The service name
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Stream description
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        public GetDBaaSLogsOutputGraylogStreamInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDBaaSLogsOutputGraylogStreamResult
    {
        public readonly bool CanAlert;
        /// <summary>
        /// Cold storage compression method
        /// </summary>
        public readonly string ColdStorageCompression;
        /// <summary>
        /// ColdStorage content
        /// </summary>
        public readonly string ColdStorageContent;
        /// <summary>
        /// Is Cold storage enabled?
        /// </summary>
        public readonly bool ColdStorageEnabled;
        /// <summary>
        /// Notify on new Cold storage archive
        /// </summary>
        public readonly bool ColdStorageNotifyEnabled;
        /// <summary>
        /// Cold storage retention in year
        /// </summary>
        public readonly int ColdStorageRetention;
        /// <summary>
        /// ColdStorage destination
        /// </summary>
        public readonly string ColdStorageTarget;
        /// <summary>
        /// Stream creation
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Stream description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Enable ES indexing
        /// </summary>
        public readonly bool IndexingEnabled;
        /// <summary>
        /// Maximum indexing size (in GB)
        /// </summary>
        public readonly int IndexingMaxSize;
        /// <summary>
        /// If set, notify when size is near 80, 90 or 100 % of the maximum configured setting
        /// </summary>
        public readonly bool IndexingNotifyEnabled;
        /// <summary>
        /// Indicates if you are allowed to edit entry
        /// </summary>
        public readonly bool IsEditable;
        /// <summary>
        /// Indicates if you are allowed to share entry
        /// </summary>
        public readonly bool IsShareable;
        /// <summary>
        /// Number of alert condition
        /// </summary>
        public readonly int NbAlertCondition;
        /// <summary>
        /// Number of coldstored archives
        /// </summary>
        public readonly int NbArchive;
        /// <summary>
        /// Parent stream ID
        /// </summary>
        public readonly string ParentStreamId;
        /// <summary>
        /// If set, pause indexing when maximum size is reach
        /// </summary>
        public readonly bool PauseIndexingOnMaxSize;
        /// <summary>
        /// Retention ID
        /// </summary>
        public readonly string RetentionId;
        public readonly string ServiceName;
        /// <summary>
        /// Stream ID
        /// </summary>
        public readonly string StreamId;
        public readonly string Title;
        /// <summary>
        /// Stream last update
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// Enable Websocket
        /// </summary>
        public readonly string WebSocketEnabled;

        [OutputConstructor]
        private GetDBaaSLogsOutputGraylogStreamResult(
            bool canAlert,

            string coldStorageCompression,

            string coldStorageContent,

            bool coldStorageEnabled,

            bool coldStorageNotifyEnabled,

            int coldStorageRetention,

            string coldStorageTarget,

            string createdAt,

            string description,

            string id,

            bool indexingEnabled,

            int indexingMaxSize,

            bool indexingNotifyEnabled,

            bool isEditable,

            bool isShareable,

            int nbAlertCondition,

            int nbArchive,

            string parentStreamId,

            bool pauseIndexingOnMaxSize,

            string retentionId,

            string serviceName,

            string streamId,

            string title,

            string updatedAt,

            string webSocketEnabled)
        {
            CanAlert = canAlert;
            ColdStorageCompression = coldStorageCompression;
            ColdStorageContent = coldStorageContent;
            ColdStorageEnabled = coldStorageEnabled;
            ColdStorageNotifyEnabled = coldStorageNotifyEnabled;
            ColdStorageRetention = coldStorageRetention;
            ColdStorageTarget = coldStorageTarget;
            CreatedAt = createdAt;
            Description = description;
            Id = id;
            IndexingEnabled = indexingEnabled;
            IndexingMaxSize = indexingMaxSize;
            IndexingNotifyEnabled = indexingNotifyEnabled;
            IsEditable = isEditable;
            IsShareable = isShareable;
            NbAlertCondition = nbAlertCondition;
            NbArchive = nbArchive;
            ParentStreamId = parentStreamId;
            PauseIndexingOnMaxSize = pauseIndexingOnMaxSize;
            RetentionId = retentionId;
            ServiceName = serviceName;
            StreamId = streamId;
            Title = title;
            UpdatedAt = updatedAt;
            WebSocketEnabled = webSocketEnabled;
        }
    }
}
