// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an IPXE Script.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func readFileOrPanic(path string) pulumi.StringPtrInput {
// 	data, err := ioutil.ReadFile(path)
// 	if err != nil {
// 		panic(err.Error())
// 	}
// 	return pulumi.String(string(data))
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewIPXEScript(ctx, "script", &ovh.IPXEScriptArgs{
// 			Script: readFileOrPanic(fmt.Sprintf("%v%v", path.Module, "/boot.ipxe")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPXEScript struct {
	pulumi.CustomResourceState

	// For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a fake description ('$name auto description') is passed at creation time.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the IPXE Script.
	Name pulumi.StringOutput `pulumi:"name"`
	// The content of the script.
	Script pulumi.StringOutput `pulumi:"script"`
}

// NewIPXEScript registers a new resource with the given unique name, arguments, and options.
func NewIPXEScript(ctx *pulumi.Context,
	name string, args *IPXEScriptArgs, opts ...pulumi.ResourceOption) (*IPXEScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Script == nil {
		return nil, errors.New("invalid value for required argument 'Script'")
	}
	var resource IPXEScript
	err := ctx.RegisterResource("ovh:index/iPXEScript:IPXEScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPXEScript gets an existing IPXEScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPXEScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPXEScriptState, opts ...pulumi.ResourceOption) (*IPXEScript, error) {
	var resource IPXEScript
	err := ctx.ReadResource("ovh:index/iPXEScript:IPXEScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPXEScript resources.
type ipxescriptState struct {
	// For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a fake description ('$name auto description') is passed at creation time.
	Description *string `pulumi:"description"`
	// The name of the IPXE Script.
	Name *string `pulumi:"name"`
	// The content of the script.
	Script *string `pulumi:"script"`
}

type IPXEScriptState struct {
	// For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a fake description ('$name auto description') is passed at creation time.
	Description pulumi.StringPtrInput
	// The name of the IPXE Script.
	Name pulumi.StringPtrInput
	// The content of the script.
	Script pulumi.StringPtrInput
}

func (IPXEScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipxescriptState)(nil)).Elem()
}

type ipxescriptArgs struct {
	// For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a fake description ('$name auto description') is passed at creation time.
	Description *string `pulumi:"description"`
	// The name of the IPXE Script.
	Name *string `pulumi:"name"`
	// The content of the script.
	Script string `pulumi:"script"`
}

// The set of arguments for constructing a IPXEScript resource.
type IPXEScriptArgs struct {
	// For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a fake description ('$name auto description') is passed at creation time.
	Description pulumi.StringPtrInput
	// The name of the IPXE Script.
	Name pulumi.StringPtrInput
	// The content of the script.
	Script pulumi.StringInput
}

func (IPXEScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipxescriptArgs)(nil)).Elem()
}

type IPXEScriptInput interface {
	pulumi.Input

	ToIPXEScriptOutput() IPXEScriptOutput
	ToIPXEScriptOutputWithContext(ctx context.Context) IPXEScriptOutput
}

func (*IPXEScript) ElementType() reflect.Type {
	return reflect.TypeOf((**IPXEScript)(nil)).Elem()
}

func (i *IPXEScript) ToIPXEScriptOutput() IPXEScriptOutput {
	return i.ToIPXEScriptOutputWithContext(context.Background())
}

func (i *IPXEScript) ToIPXEScriptOutputWithContext(ctx context.Context) IPXEScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPXEScriptOutput)
}

// IPXEScriptArrayInput is an input type that accepts IPXEScriptArray and IPXEScriptArrayOutput values.
// You can construct a concrete instance of `IPXEScriptArrayInput` via:
//
//          IPXEScriptArray{ IPXEScriptArgs{...} }
type IPXEScriptArrayInput interface {
	pulumi.Input

	ToIPXEScriptArrayOutput() IPXEScriptArrayOutput
	ToIPXEScriptArrayOutputWithContext(context.Context) IPXEScriptArrayOutput
}

type IPXEScriptArray []IPXEScriptInput

func (IPXEScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPXEScript)(nil)).Elem()
}

func (i IPXEScriptArray) ToIPXEScriptArrayOutput() IPXEScriptArrayOutput {
	return i.ToIPXEScriptArrayOutputWithContext(context.Background())
}

func (i IPXEScriptArray) ToIPXEScriptArrayOutputWithContext(ctx context.Context) IPXEScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPXEScriptArrayOutput)
}

// IPXEScriptMapInput is an input type that accepts IPXEScriptMap and IPXEScriptMapOutput values.
// You can construct a concrete instance of `IPXEScriptMapInput` via:
//
//          IPXEScriptMap{ "key": IPXEScriptArgs{...} }
type IPXEScriptMapInput interface {
	pulumi.Input

	ToIPXEScriptMapOutput() IPXEScriptMapOutput
	ToIPXEScriptMapOutputWithContext(context.Context) IPXEScriptMapOutput
}

type IPXEScriptMap map[string]IPXEScriptInput

func (IPXEScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPXEScript)(nil)).Elem()
}

func (i IPXEScriptMap) ToIPXEScriptMapOutput() IPXEScriptMapOutput {
	return i.ToIPXEScriptMapOutputWithContext(context.Background())
}

func (i IPXEScriptMap) ToIPXEScriptMapOutputWithContext(ctx context.Context) IPXEScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPXEScriptMapOutput)
}

type IPXEScriptOutput struct{ *pulumi.OutputState }

func (IPXEScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPXEScript)(nil)).Elem()
}

func (o IPXEScriptOutput) ToIPXEScriptOutput() IPXEScriptOutput {
	return o
}

func (o IPXEScriptOutput) ToIPXEScriptOutputWithContext(ctx context.Context) IPXEScriptOutput {
	return o
}

// For documentation purpose only. This attribute is not passed to the OVH API as it cannot be retrieved back. Instead a fake description ('$name auto description') is passed at creation time.
func (o IPXEScriptOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *IPXEScript) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the IPXE Script.
func (o IPXEScriptOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IPXEScript) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The content of the script.
func (o IPXEScriptOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v *IPXEScript) pulumi.StringOutput { return v.Script }).(pulumi.StringOutput)
}

type IPXEScriptArrayOutput struct{ *pulumi.OutputState }

func (IPXEScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPXEScript)(nil)).Elem()
}

func (o IPXEScriptArrayOutput) ToIPXEScriptArrayOutput() IPXEScriptArrayOutput {
	return o
}

func (o IPXEScriptArrayOutput) ToIPXEScriptArrayOutputWithContext(ctx context.Context) IPXEScriptArrayOutput {
	return o
}

func (o IPXEScriptArrayOutput) Index(i pulumi.IntInput) IPXEScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPXEScript {
		return vs[0].([]*IPXEScript)[vs[1].(int)]
	}).(IPXEScriptOutput)
}

type IPXEScriptMapOutput struct{ *pulumi.OutputState }

func (IPXEScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPXEScript)(nil)).Elem()
}

func (o IPXEScriptMapOutput) ToIPXEScriptMapOutput() IPXEScriptMapOutput {
	return o
}

func (o IPXEScriptMapOutput) ToIPXEScriptMapOutputWithContext(ctx context.Context) IPXEScriptMapOutput {
	return o
}

func (o IPXEScriptMapOutput) MapIndex(k pulumi.StringInput) IPXEScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPXEScript {
		return vs[0].(map[string]*IPXEScript)[vs[1].(string)]
	}).(IPXEScriptOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPXEScriptInput)(nil)).Elem(), &IPXEScript{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPXEScriptArrayInput)(nil)).Elem(), IPXEScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPXEScriptMapInput)(nil)).Elem(), IPXEScriptMap{})
	pulumi.RegisterOutputType(IPXEScriptOutput{})
	pulumi.RegisterOutputType(IPXEScriptArrayOutput{})
	pulumi.RegisterOutputType(IPXEScriptMapOutput{})
}
