// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a backend server entry linked to http loadbalancing group (farm)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		lb, err := ovh.LookupIPLoadBalancing(ctx, &GetIPLoadBalancingArgs{
// 			ServiceName: pulumi.StringRef("ip-1.2.3.4"),
// 			State:       pulumi.StringRef("ok"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		farmname, err := ovh.NewIPLoadBalancingHTTPFarm(ctx, "farmname", &ovh.IPLoadBalancingHTTPFarmArgs{
// 			ServiceName: pulumi.String(lb.Id),
// 			Port:        pulumi.Int(8080),
// 			Zone:        pulumi.String("all"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewIPLoadBalancingHTTPFarmServer(ctx, "backend", &ovh.IPLoadBalancingHTTPFarmServerArgs{
// 			ServiceName:          pulumi.String(lb.Id),
// 			FarmId:               farmname.ID(),
// 			DisplayName:          pulumi.String("mybackend"),
// 			Address:              pulumi.String("4.5.6.7"),
// 			Status:               pulumi.String("active"),
// 			Port:                 pulumi.Int(80),
// 			ProxyProtocolVersion: pulumi.Any(v2),
// 			Weight:               pulumi.Int(2),
// 			Probe:                pulumi.Bool(true),
// 			Ssl:                  pulumi.Bool(false),
// 			Backup:               pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPLoadBalancingHTTPFarmServer struct {
	pulumi.CustomResourceState

	// Address of the backend server (IP from either internal or OVH network)
	Address pulumi.StringOutput `pulumi:"address"`
	// is it a backup server used in case of failure of all the non-backup backends
	Backup pulumi.BoolPtrOutput   `pulumi:"backup"`
	Chain  pulumi.StringPtrOutput `pulumi:"chain"`
	// Value of the stickiness cookie used for this backend.
	Cookie pulumi.StringOutput `pulumi:"cookie"`
	// Label for the server
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// ID of the farm this server is attached to
	FarmId pulumi.IntOutput `pulumi:"farmId"`
	// Port that backend will respond on
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe pulumi.BoolPtrOutput `pulumi:"probe"`
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion pulumi.StringPtrOutput `pulumi:"proxyProtocolVersion"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// is the connection ciphered with SSL (TLS)
	Ssl pulumi.BoolPtrOutput `pulumi:"ssl"`
	// backend status - `active` or `inactive`
	Status pulumi.StringOutput `pulumi:"status"`
	// used in loadbalancing algorithm
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
}

// NewIPLoadBalancingHTTPFarmServer registers a new resource with the given unique name, arguments, and options.
func NewIPLoadBalancingHTTPFarmServer(ctx *pulumi.Context,
	name string, args *IPLoadBalancingHTTPFarmServerArgs, opts ...pulumi.ResourceOption) (*IPLoadBalancingHTTPFarmServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.FarmId == nil {
		return nil, errors.New("invalid value for required argument 'FarmId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	var resource IPLoadBalancingHTTPFarmServer
	err := ctx.RegisterResource("ovh:index/iPLoadBalancingHTTPFarmServer:IPLoadBalancingHTTPFarmServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadBalancingHTTPFarmServer gets an existing IPLoadBalancingHTTPFarmServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadBalancingHTTPFarmServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadBalancingHTTPFarmServerState, opts ...pulumi.ResourceOption) (*IPLoadBalancingHTTPFarmServer, error) {
	var resource IPLoadBalancingHTTPFarmServer
	err := ctx.ReadResource("ovh:index/iPLoadBalancingHTTPFarmServer:IPLoadBalancingHTTPFarmServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadBalancingHTTPFarmServer resources.
type iploadBalancingHTTPFarmServerState struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address *string `pulumi:"address"`
	// is it a backup server used in case of failure of all the non-backup backends
	Backup *bool   `pulumi:"backup"`
	Chain  *string `pulumi:"chain"`
	// Value of the stickiness cookie used for this backend.
	Cookie *string `pulumi:"cookie"`
	// Label for the server
	DisplayName *string `pulumi:"displayName"`
	// ID of the farm this server is attached to
	FarmId *int `pulumi:"farmId"`
	// Port that backend will respond on
	Port *int `pulumi:"port"`
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe *bool `pulumi:"probe"`
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion *string `pulumi:"proxyProtocolVersion"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// is the connection ciphered with SSL (TLS)
	Ssl *bool `pulumi:"ssl"`
	// backend status - `active` or `inactive`
	Status *string `pulumi:"status"`
	// used in loadbalancing algorithm
	Weight *int `pulumi:"weight"`
}

type IPLoadBalancingHTTPFarmServerState struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address pulumi.StringPtrInput
	// is it a backup server used in case of failure of all the non-backup backends
	Backup pulumi.BoolPtrInput
	Chain  pulumi.StringPtrInput
	// Value of the stickiness cookie used for this backend.
	Cookie pulumi.StringPtrInput
	// Label for the server
	DisplayName pulumi.StringPtrInput
	// ID of the farm this server is attached to
	FarmId pulumi.IntPtrInput
	// Port that backend will respond on
	Port pulumi.IntPtrInput
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe pulumi.BoolPtrInput
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// is the connection ciphered with SSL (TLS)
	Ssl pulumi.BoolPtrInput
	// backend status - `active` or `inactive`
	Status pulumi.StringPtrInput
	// used in loadbalancing algorithm
	Weight pulumi.IntPtrInput
}

func (IPLoadBalancingHTTPFarmServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadBalancingHTTPFarmServerState)(nil)).Elem()
}

type iploadBalancingHTTPFarmServerArgs struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address string `pulumi:"address"`
	// is it a backup server used in case of failure of all the non-backup backends
	Backup *bool   `pulumi:"backup"`
	Chain  *string `pulumi:"chain"`
	// Label for the server
	DisplayName *string `pulumi:"displayName"`
	// ID of the farm this server is attached to
	FarmId int `pulumi:"farmId"`
	// Port that backend will respond on
	Port *int `pulumi:"port"`
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe *bool `pulumi:"probe"`
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion *string `pulumi:"proxyProtocolVersion"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// is the connection ciphered with SSL (TLS)
	Ssl *bool `pulumi:"ssl"`
	// backend status - `active` or `inactive`
	Status string `pulumi:"status"`
	// used in loadbalancing algorithm
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a IPLoadBalancingHTTPFarmServer resource.
type IPLoadBalancingHTTPFarmServerArgs struct {
	// Address of the backend server (IP from either internal or OVH network)
	Address pulumi.StringInput
	// is it a backup server used in case of failure of all the non-backup backends
	Backup pulumi.BoolPtrInput
	Chain  pulumi.StringPtrInput
	// Label for the server
	DisplayName pulumi.StringPtrInput
	// ID of the farm this server is attached to
	FarmId pulumi.IntInput
	// Port that backend will respond on
	Port pulumi.IntPtrInput
	// defines if backend will be probed to determine health and keep as active in farm if healthy
	Probe pulumi.BoolPtrInput
	// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
	ProxyProtocolVersion pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// is the connection ciphered with SSL (TLS)
	Ssl pulumi.BoolPtrInput
	// backend status - `active` or `inactive`
	Status pulumi.StringInput
	// used in loadbalancing algorithm
	Weight pulumi.IntPtrInput
}

func (IPLoadBalancingHTTPFarmServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadBalancingHTTPFarmServerArgs)(nil)).Elem()
}

type IPLoadBalancingHTTPFarmServerInput interface {
	pulumi.Input

	ToIPLoadBalancingHTTPFarmServerOutput() IPLoadBalancingHTTPFarmServerOutput
	ToIPLoadBalancingHTTPFarmServerOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFarmServerOutput
}

func (*IPLoadBalancingHTTPFarmServer) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadBalancingHTTPFarmServer)(nil)).Elem()
}

func (i *IPLoadBalancingHTTPFarmServer) ToIPLoadBalancingHTTPFarmServerOutput() IPLoadBalancingHTTPFarmServerOutput {
	return i.ToIPLoadBalancingHTTPFarmServerOutputWithContext(context.Background())
}

func (i *IPLoadBalancingHTTPFarmServer) ToIPLoadBalancingHTTPFarmServerOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFarmServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingHTTPFarmServerOutput)
}

// IPLoadBalancingHTTPFarmServerArrayInput is an input type that accepts IPLoadBalancingHTTPFarmServerArray and IPLoadBalancingHTTPFarmServerArrayOutput values.
// You can construct a concrete instance of `IPLoadBalancingHTTPFarmServerArrayInput` via:
//
//          IPLoadBalancingHTTPFarmServerArray{ IPLoadBalancingHTTPFarmServerArgs{...} }
type IPLoadBalancingHTTPFarmServerArrayInput interface {
	pulumi.Input

	ToIPLoadBalancingHTTPFarmServerArrayOutput() IPLoadBalancingHTTPFarmServerArrayOutput
	ToIPLoadBalancingHTTPFarmServerArrayOutputWithContext(context.Context) IPLoadBalancingHTTPFarmServerArrayOutput
}

type IPLoadBalancingHTTPFarmServerArray []IPLoadBalancingHTTPFarmServerInput

func (IPLoadBalancingHTTPFarmServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadBalancingHTTPFarmServer)(nil)).Elem()
}

func (i IPLoadBalancingHTTPFarmServerArray) ToIPLoadBalancingHTTPFarmServerArrayOutput() IPLoadBalancingHTTPFarmServerArrayOutput {
	return i.ToIPLoadBalancingHTTPFarmServerArrayOutputWithContext(context.Background())
}

func (i IPLoadBalancingHTTPFarmServerArray) ToIPLoadBalancingHTTPFarmServerArrayOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFarmServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingHTTPFarmServerArrayOutput)
}

// IPLoadBalancingHTTPFarmServerMapInput is an input type that accepts IPLoadBalancingHTTPFarmServerMap and IPLoadBalancingHTTPFarmServerMapOutput values.
// You can construct a concrete instance of `IPLoadBalancingHTTPFarmServerMapInput` via:
//
//          IPLoadBalancingHTTPFarmServerMap{ "key": IPLoadBalancingHTTPFarmServerArgs{...} }
type IPLoadBalancingHTTPFarmServerMapInput interface {
	pulumi.Input

	ToIPLoadBalancingHTTPFarmServerMapOutput() IPLoadBalancingHTTPFarmServerMapOutput
	ToIPLoadBalancingHTTPFarmServerMapOutputWithContext(context.Context) IPLoadBalancingHTTPFarmServerMapOutput
}

type IPLoadBalancingHTTPFarmServerMap map[string]IPLoadBalancingHTTPFarmServerInput

func (IPLoadBalancingHTTPFarmServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadBalancingHTTPFarmServer)(nil)).Elem()
}

func (i IPLoadBalancingHTTPFarmServerMap) ToIPLoadBalancingHTTPFarmServerMapOutput() IPLoadBalancingHTTPFarmServerMapOutput {
	return i.ToIPLoadBalancingHTTPFarmServerMapOutputWithContext(context.Background())
}

func (i IPLoadBalancingHTTPFarmServerMap) ToIPLoadBalancingHTTPFarmServerMapOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFarmServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingHTTPFarmServerMapOutput)
}

type IPLoadBalancingHTTPFarmServerOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingHTTPFarmServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadBalancingHTTPFarmServer)(nil)).Elem()
}

func (o IPLoadBalancingHTTPFarmServerOutput) ToIPLoadBalancingHTTPFarmServerOutput() IPLoadBalancingHTTPFarmServerOutput {
	return o
}

func (o IPLoadBalancingHTTPFarmServerOutput) ToIPLoadBalancingHTTPFarmServerOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFarmServerOutput {
	return o
}

// Address of the backend server (IP from either internal or OVH network)
func (o IPLoadBalancingHTTPFarmServerOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// is it a backup server used in case of failure of all the non-backup backends
func (o IPLoadBalancingHTTPFarmServerOutput) Backup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.BoolPtrOutput { return v.Backup }).(pulumi.BoolPtrOutput)
}

func (o IPLoadBalancingHTTPFarmServerOutput) Chain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.StringPtrOutput { return v.Chain }).(pulumi.StringPtrOutput)
}

// Value of the stickiness cookie used for this backend.
func (o IPLoadBalancingHTTPFarmServerOutput) Cookie() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.StringOutput { return v.Cookie }).(pulumi.StringOutput)
}

// Label for the server
func (o IPLoadBalancingHTTPFarmServerOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// ID of the farm this server is attached to
func (o IPLoadBalancingHTTPFarmServerOutput) FarmId() pulumi.IntOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.IntOutput { return v.FarmId }).(pulumi.IntOutput)
}

// Port that backend will respond on
func (o IPLoadBalancingHTTPFarmServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// defines if backend will be probed to determine health and keep as active in farm if healthy
func (o IPLoadBalancingHTTPFarmServerOutput) Probe() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.BoolPtrOutput { return v.Probe }).(pulumi.BoolPtrOutput)
}

// version of the PROXY protocol used to pass origin connection information from loadbalancer to recieving service (`v1`, `v2`, `v2-ssl`, `v2-ssl-cn`)
func (o IPLoadBalancingHTTPFarmServerOutput) ProxyProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.StringPtrOutput { return v.ProxyProtocolVersion }).(pulumi.StringPtrOutput)
}

// The internal name of your IP load balancing
func (o IPLoadBalancingHTTPFarmServerOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// is the connection ciphered with SSL (TLS)
func (o IPLoadBalancingHTTPFarmServerOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.BoolPtrOutput { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// backend status - `active` or `inactive`
func (o IPLoadBalancingHTTPFarmServerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// used in loadbalancing algorithm
func (o IPLoadBalancingHTTPFarmServerOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFarmServer) pulumi.IntPtrOutput { return v.Weight }).(pulumi.IntPtrOutput)
}

type IPLoadBalancingHTTPFarmServerArrayOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingHTTPFarmServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadBalancingHTTPFarmServer)(nil)).Elem()
}

func (o IPLoadBalancingHTTPFarmServerArrayOutput) ToIPLoadBalancingHTTPFarmServerArrayOutput() IPLoadBalancingHTTPFarmServerArrayOutput {
	return o
}

func (o IPLoadBalancingHTTPFarmServerArrayOutput) ToIPLoadBalancingHTTPFarmServerArrayOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFarmServerArrayOutput {
	return o
}

func (o IPLoadBalancingHTTPFarmServerArrayOutput) Index(i pulumi.IntInput) IPLoadBalancingHTTPFarmServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadBalancingHTTPFarmServer {
		return vs[0].([]*IPLoadBalancingHTTPFarmServer)[vs[1].(int)]
	}).(IPLoadBalancingHTTPFarmServerOutput)
}

type IPLoadBalancingHTTPFarmServerMapOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingHTTPFarmServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadBalancingHTTPFarmServer)(nil)).Elem()
}

func (o IPLoadBalancingHTTPFarmServerMapOutput) ToIPLoadBalancingHTTPFarmServerMapOutput() IPLoadBalancingHTTPFarmServerMapOutput {
	return o
}

func (o IPLoadBalancingHTTPFarmServerMapOutput) ToIPLoadBalancingHTTPFarmServerMapOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFarmServerMapOutput {
	return o
}

func (o IPLoadBalancingHTTPFarmServerMapOutput) MapIndex(k pulumi.StringInput) IPLoadBalancingHTTPFarmServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadBalancingHTTPFarmServer {
		return vs[0].(map[string]*IPLoadBalancingHTTPFarmServer)[vs[1].(string)]
	}).(IPLoadBalancingHTTPFarmServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingHTTPFarmServerInput)(nil)).Elem(), &IPLoadBalancingHTTPFarmServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingHTTPFarmServerArrayInput)(nil)).Elem(), IPLoadBalancingHTTPFarmServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingHTTPFarmServerMapInput)(nil)).Elem(), IPLoadBalancingHTTPFarmServerMap{})
	pulumi.RegisterOutputType(IPLoadBalancingHTTPFarmServerOutput{})
	pulumi.RegisterOutputType(IPLoadBalancingHTTPFarmServerArrayOutput{})
	pulumi.RegisterOutputType(IPLoadBalancingHTTPFarmServerMapOutput{})
}
