// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach a Dedicated Server Network Interface to a VRack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewVRackDedicatedServerInterface(ctx, "vdsi", &ovh.VRackDedicatedServerInterfaceArgs{
// 			InterfaceId: pulumi.String("67890"),
// 			ServiceName: pulumi.String("12345"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VRackDedicatedServerInterface struct {
	pulumi.CustomResourceState

	// The id of dedicated server network interface.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVRackDedicatedServerInterface registers a new resource with the given unique name, arguments, and options.
func NewVRackDedicatedServerInterface(ctx *pulumi.Context,
	name string, args *VRackDedicatedServerInterfaceArgs, opts ...pulumi.ResourceOption) (*VRackDedicatedServerInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource VRackDedicatedServerInterface
	err := ctx.RegisterResource("ovh:index/vRackDedicatedServerInterface:VRackDedicatedServerInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVRackDedicatedServerInterface gets an existing VRackDedicatedServerInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVRackDedicatedServerInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VRackDedicatedServerInterfaceState, opts ...pulumi.ResourceOption) (*VRackDedicatedServerInterface, error) {
	var resource VRackDedicatedServerInterface
	err := ctx.ReadResource("ovh:index/vRackDedicatedServerInterface:VRackDedicatedServerInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VRackDedicatedServerInterface resources.
type vrackDedicatedServerInterfaceState struct {
	// The id of dedicated server network interface.
	InterfaceId *string `pulumi:"interfaceId"`
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName *string `pulumi:"serviceName"`
}

type VRackDedicatedServerInterfaceState struct {
	// The id of dedicated server network interface.
	InterfaceId pulumi.StringPtrInput
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName pulumi.StringPtrInput
}

func (VRackDedicatedServerInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackDedicatedServerInterfaceState)(nil)).Elem()
}

type vrackDedicatedServerInterfaceArgs struct {
	// The id of dedicated server network interface.
	InterfaceId string `pulumi:"interfaceId"`
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VRackDedicatedServerInterface resource.
type VRackDedicatedServerInterfaceArgs struct {
	// The id of dedicated server network interface.
	InterfaceId pulumi.StringInput
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName pulumi.StringInput
}

func (VRackDedicatedServerInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackDedicatedServerInterfaceArgs)(nil)).Elem()
}

type VRackDedicatedServerInterfaceInput interface {
	pulumi.Input

	ToVRackDedicatedServerInterfaceOutput() VRackDedicatedServerInterfaceOutput
	ToVRackDedicatedServerInterfaceOutputWithContext(ctx context.Context) VRackDedicatedServerInterfaceOutput
}

func (*VRackDedicatedServerInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**VRackDedicatedServerInterface)(nil)).Elem()
}

func (i *VRackDedicatedServerInterface) ToVRackDedicatedServerInterfaceOutput() VRackDedicatedServerInterfaceOutput {
	return i.ToVRackDedicatedServerInterfaceOutputWithContext(context.Background())
}

func (i *VRackDedicatedServerInterface) ToVRackDedicatedServerInterfaceOutputWithContext(ctx context.Context) VRackDedicatedServerInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackDedicatedServerInterfaceOutput)
}

// VRackDedicatedServerInterfaceArrayInput is an input type that accepts VRackDedicatedServerInterfaceArray and VRackDedicatedServerInterfaceArrayOutput values.
// You can construct a concrete instance of `VRackDedicatedServerInterfaceArrayInput` via:
//
//          VRackDedicatedServerInterfaceArray{ VRackDedicatedServerInterfaceArgs{...} }
type VRackDedicatedServerInterfaceArrayInput interface {
	pulumi.Input

	ToVRackDedicatedServerInterfaceArrayOutput() VRackDedicatedServerInterfaceArrayOutput
	ToVRackDedicatedServerInterfaceArrayOutputWithContext(context.Context) VRackDedicatedServerInterfaceArrayOutput
}

type VRackDedicatedServerInterfaceArray []VRackDedicatedServerInterfaceInput

func (VRackDedicatedServerInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRackDedicatedServerInterface)(nil)).Elem()
}

func (i VRackDedicatedServerInterfaceArray) ToVRackDedicatedServerInterfaceArrayOutput() VRackDedicatedServerInterfaceArrayOutput {
	return i.ToVRackDedicatedServerInterfaceArrayOutputWithContext(context.Background())
}

func (i VRackDedicatedServerInterfaceArray) ToVRackDedicatedServerInterfaceArrayOutputWithContext(ctx context.Context) VRackDedicatedServerInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackDedicatedServerInterfaceArrayOutput)
}

// VRackDedicatedServerInterfaceMapInput is an input type that accepts VRackDedicatedServerInterfaceMap and VRackDedicatedServerInterfaceMapOutput values.
// You can construct a concrete instance of `VRackDedicatedServerInterfaceMapInput` via:
//
//          VRackDedicatedServerInterfaceMap{ "key": VRackDedicatedServerInterfaceArgs{...} }
type VRackDedicatedServerInterfaceMapInput interface {
	pulumi.Input

	ToVRackDedicatedServerInterfaceMapOutput() VRackDedicatedServerInterfaceMapOutput
	ToVRackDedicatedServerInterfaceMapOutputWithContext(context.Context) VRackDedicatedServerInterfaceMapOutput
}

type VRackDedicatedServerInterfaceMap map[string]VRackDedicatedServerInterfaceInput

func (VRackDedicatedServerInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRackDedicatedServerInterface)(nil)).Elem()
}

func (i VRackDedicatedServerInterfaceMap) ToVRackDedicatedServerInterfaceMapOutput() VRackDedicatedServerInterfaceMapOutput {
	return i.ToVRackDedicatedServerInterfaceMapOutputWithContext(context.Background())
}

func (i VRackDedicatedServerInterfaceMap) ToVRackDedicatedServerInterfaceMapOutputWithContext(ctx context.Context) VRackDedicatedServerInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackDedicatedServerInterfaceMapOutput)
}

type VRackDedicatedServerInterfaceOutput struct{ *pulumi.OutputState }

func (VRackDedicatedServerInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VRackDedicatedServerInterface)(nil)).Elem()
}

func (o VRackDedicatedServerInterfaceOutput) ToVRackDedicatedServerInterfaceOutput() VRackDedicatedServerInterfaceOutput {
	return o
}

func (o VRackDedicatedServerInterfaceOutput) ToVRackDedicatedServerInterfaceOutputWithContext(ctx context.Context) VRackDedicatedServerInterfaceOutput {
	return o
}

// The id of dedicated server network interface.
func (o VRackDedicatedServerInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *VRackDedicatedServerInterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// The id of the vrack. If omitted,
// the `OVH_VRACK_SERVICE` environment variable is used.
func (o VRackDedicatedServerInterfaceOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VRackDedicatedServerInterface) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type VRackDedicatedServerInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VRackDedicatedServerInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRackDedicatedServerInterface)(nil)).Elem()
}

func (o VRackDedicatedServerInterfaceArrayOutput) ToVRackDedicatedServerInterfaceArrayOutput() VRackDedicatedServerInterfaceArrayOutput {
	return o
}

func (o VRackDedicatedServerInterfaceArrayOutput) ToVRackDedicatedServerInterfaceArrayOutputWithContext(ctx context.Context) VRackDedicatedServerInterfaceArrayOutput {
	return o
}

func (o VRackDedicatedServerInterfaceArrayOutput) Index(i pulumi.IntInput) VRackDedicatedServerInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VRackDedicatedServerInterface {
		return vs[0].([]*VRackDedicatedServerInterface)[vs[1].(int)]
	}).(VRackDedicatedServerInterfaceOutput)
}

type VRackDedicatedServerInterfaceMapOutput struct{ *pulumi.OutputState }

func (VRackDedicatedServerInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRackDedicatedServerInterface)(nil)).Elem()
}

func (o VRackDedicatedServerInterfaceMapOutput) ToVRackDedicatedServerInterfaceMapOutput() VRackDedicatedServerInterfaceMapOutput {
	return o
}

func (o VRackDedicatedServerInterfaceMapOutput) ToVRackDedicatedServerInterfaceMapOutputWithContext(ctx context.Context) VRackDedicatedServerInterfaceMapOutput {
	return o
}

func (o VRackDedicatedServerInterfaceMapOutput) MapIndex(k pulumi.StringInput) VRackDedicatedServerInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VRackDedicatedServerInterface {
		return vs[0].(map[string]*VRackDedicatedServerInterface)[vs[1].(string)]
	}).(VRackDedicatedServerInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VRackDedicatedServerInterfaceInput)(nil)).Elem(), &VRackDedicatedServerInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRackDedicatedServerInterfaceArrayInput)(nil)).Elem(), VRackDedicatedServerInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRackDedicatedServerInterfaceMapInput)(nil)).Elem(), VRackDedicatedServerInterfaceMap{})
	pulumi.RegisterOutputType(VRackDedicatedServerInterfaceOutput{})
	pulumi.RegisterOutputType(VRackDedicatedServerInterfaceArrayOutput{})
	pulumi.RegisterOutputType(VRackDedicatedServerInterfaceMapOutput{})
}
