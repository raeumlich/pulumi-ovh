// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach a ip loadbalancing to a VRack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewVRackIPLoadBalancing(ctx, "viplb", &ovh.VRackIPLoadBalancingArgs{
// 			IpLoadbalancing: pulumi.String("yyy"),
// 			ServiceName:     pulumi.String("xxx"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VRackIPLoadBalancing struct {
	pulumi.CustomResourceState

	// The id of the ip loadbalancing.
	IpLoadbalancing pulumi.StringOutput `pulumi:"ipLoadbalancing"`
	// The id of the vrack.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVRackIPLoadBalancing registers a new resource with the given unique name, arguments, and options.
func NewVRackIPLoadBalancing(ctx *pulumi.Context,
	name string, args *VRackIPLoadBalancingArgs, opts ...pulumi.ResourceOption) (*VRackIPLoadBalancing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpLoadbalancing == nil {
		return nil, errors.New("invalid value for required argument 'IpLoadbalancing'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource VRackIPLoadBalancing
	err := ctx.RegisterResource("ovh:index/vRackIPLoadBalancing:VRackIPLoadBalancing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVRackIPLoadBalancing gets an existing VRackIPLoadBalancing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVRackIPLoadBalancing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VRackIPLoadBalancingState, opts ...pulumi.ResourceOption) (*VRackIPLoadBalancing, error) {
	var resource VRackIPLoadBalancing
	err := ctx.ReadResource("ovh:index/vRackIPLoadBalancing:VRackIPLoadBalancing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VRackIPLoadBalancing resources.
type vrackIPLoadBalancingState struct {
	// The id of the ip loadbalancing.
	IpLoadbalancing *string `pulumi:"ipLoadbalancing"`
	// The id of the vrack.
	ServiceName *string `pulumi:"serviceName"`
}

type VRackIPLoadBalancingState struct {
	// The id of the ip loadbalancing.
	IpLoadbalancing pulumi.StringPtrInput
	// The id of the vrack.
	ServiceName pulumi.StringPtrInput
}

func (VRackIPLoadBalancingState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIPLoadBalancingState)(nil)).Elem()
}

type vrackIPLoadBalancingArgs struct {
	// The id of the ip loadbalancing.
	IpLoadbalancing string `pulumi:"ipLoadbalancing"`
	// The id of the vrack.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VRackIPLoadBalancing resource.
type VRackIPLoadBalancingArgs struct {
	// The id of the ip loadbalancing.
	IpLoadbalancing pulumi.StringInput
	// The id of the vrack.
	ServiceName pulumi.StringInput
}

func (VRackIPLoadBalancingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIPLoadBalancingArgs)(nil)).Elem()
}

type VRackIPLoadBalancingInput interface {
	pulumi.Input

	ToVRackIPLoadBalancingOutput() VRackIPLoadBalancingOutput
	ToVRackIPLoadBalancingOutputWithContext(ctx context.Context) VRackIPLoadBalancingOutput
}

func (*VRackIPLoadBalancing) ElementType() reflect.Type {
	return reflect.TypeOf((**VRackIPLoadBalancing)(nil)).Elem()
}

func (i *VRackIPLoadBalancing) ToVRackIPLoadBalancingOutput() VRackIPLoadBalancingOutput {
	return i.ToVRackIPLoadBalancingOutputWithContext(context.Background())
}

func (i *VRackIPLoadBalancing) ToVRackIPLoadBalancingOutputWithContext(ctx context.Context) VRackIPLoadBalancingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackIPLoadBalancingOutput)
}

// VRackIPLoadBalancingArrayInput is an input type that accepts VRackIPLoadBalancingArray and VRackIPLoadBalancingArrayOutput values.
// You can construct a concrete instance of `VRackIPLoadBalancingArrayInput` via:
//
//          VRackIPLoadBalancingArray{ VRackIPLoadBalancingArgs{...} }
type VRackIPLoadBalancingArrayInput interface {
	pulumi.Input

	ToVRackIPLoadBalancingArrayOutput() VRackIPLoadBalancingArrayOutput
	ToVRackIPLoadBalancingArrayOutputWithContext(context.Context) VRackIPLoadBalancingArrayOutput
}

type VRackIPLoadBalancingArray []VRackIPLoadBalancingInput

func (VRackIPLoadBalancingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRackIPLoadBalancing)(nil)).Elem()
}

func (i VRackIPLoadBalancingArray) ToVRackIPLoadBalancingArrayOutput() VRackIPLoadBalancingArrayOutput {
	return i.ToVRackIPLoadBalancingArrayOutputWithContext(context.Background())
}

func (i VRackIPLoadBalancingArray) ToVRackIPLoadBalancingArrayOutputWithContext(ctx context.Context) VRackIPLoadBalancingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackIPLoadBalancingArrayOutput)
}

// VRackIPLoadBalancingMapInput is an input type that accepts VRackIPLoadBalancingMap and VRackIPLoadBalancingMapOutput values.
// You can construct a concrete instance of `VRackIPLoadBalancingMapInput` via:
//
//          VRackIPLoadBalancingMap{ "key": VRackIPLoadBalancingArgs{...} }
type VRackIPLoadBalancingMapInput interface {
	pulumi.Input

	ToVRackIPLoadBalancingMapOutput() VRackIPLoadBalancingMapOutput
	ToVRackIPLoadBalancingMapOutputWithContext(context.Context) VRackIPLoadBalancingMapOutput
}

type VRackIPLoadBalancingMap map[string]VRackIPLoadBalancingInput

func (VRackIPLoadBalancingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRackIPLoadBalancing)(nil)).Elem()
}

func (i VRackIPLoadBalancingMap) ToVRackIPLoadBalancingMapOutput() VRackIPLoadBalancingMapOutput {
	return i.ToVRackIPLoadBalancingMapOutputWithContext(context.Background())
}

func (i VRackIPLoadBalancingMap) ToVRackIPLoadBalancingMapOutputWithContext(ctx context.Context) VRackIPLoadBalancingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackIPLoadBalancingMapOutput)
}

type VRackIPLoadBalancingOutput struct{ *pulumi.OutputState }

func (VRackIPLoadBalancingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VRackIPLoadBalancing)(nil)).Elem()
}

func (o VRackIPLoadBalancingOutput) ToVRackIPLoadBalancingOutput() VRackIPLoadBalancingOutput {
	return o
}

func (o VRackIPLoadBalancingOutput) ToVRackIPLoadBalancingOutputWithContext(ctx context.Context) VRackIPLoadBalancingOutput {
	return o
}

// The id of the ip loadbalancing.
func (o VRackIPLoadBalancingOutput) IpLoadbalancing() pulumi.StringOutput {
	return o.ApplyT(func(v *VRackIPLoadBalancing) pulumi.StringOutput { return v.IpLoadbalancing }).(pulumi.StringOutput)
}

// The id of the vrack.
func (o VRackIPLoadBalancingOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VRackIPLoadBalancing) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type VRackIPLoadBalancingArrayOutput struct{ *pulumi.OutputState }

func (VRackIPLoadBalancingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRackIPLoadBalancing)(nil)).Elem()
}

func (o VRackIPLoadBalancingArrayOutput) ToVRackIPLoadBalancingArrayOutput() VRackIPLoadBalancingArrayOutput {
	return o
}

func (o VRackIPLoadBalancingArrayOutput) ToVRackIPLoadBalancingArrayOutputWithContext(ctx context.Context) VRackIPLoadBalancingArrayOutput {
	return o
}

func (o VRackIPLoadBalancingArrayOutput) Index(i pulumi.IntInput) VRackIPLoadBalancingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VRackIPLoadBalancing {
		return vs[0].([]*VRackIPLoadBalancing)[vs[1].(int)]
	}).(VRackIPLoadBalancingOutput)
}

type VRackIPLoadBalancingMapOutput struct{ *pulumi.OutputState }

func (VRackIPLoadBalancingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRackIPLoadBalancing)(nil)).Elem()
}

func (o VRackIPLoadBalancingMapOutput) ToVRackIPLoadBalancingMapOutput() VRackIPLoadBalancingMapOutput {
	return o
}

func (o VRackIPLoadBalancingMapOutput) ToVRackIPLoadBalancingMapOutputWithContext(ctx context.Context) VRackIPLoadBalancingMapOutput {
	return o
}

func (o VRackIPLoadBalancingMapOutput) MapIndex(k pulumi.StringInput) VRackIPLoadBalancingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VRackIPLoadBalancing {
		return vs[0].(map[string]*VRackIPLoadBalancing)[vs[1].(string)]
	}).(VRackIPLoadBalancingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VRackIPLoadBalancingInput)(nil)).Elem(), &VRackIPLoadBalancing{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRackIPLoadBalancingArrayInput)(nil)).Elem(), VRackIPLoadBalancingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRackIPLoadBalancingMapInput)(nil)).Elem(), VRackIPLoadBalancingMap{})
	pulumi.RegisterOutputType(VRackIPLoadBalancingOutput{})
	pulumi.RegisterOutputType(VRackIPLoadBalancingArrayOutput{})
	pulumi.RegisterOutputType(VRackIPLoadBalancingMapOutput{})
}
