// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a backend server group (farm) to be used by loadbalancing frontend(s)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		lb, err := ovh.LookupIPLoadBalancing(ctx, &GetIPLoadBalancingArgs{
// 			ServiceName: pulumi.StringRef("ip-1.2.3.4"),
// 			State:       pulumi.StringRef("ok"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewIPLoadBalancingTCPFarm(ctx, "farmname", &ovh.IPLoadBalancingTCPFarmArgs{
// 			DisplayName: pulumi.String("ingress-8080-gra"),
// 			ServiceName: pulumi.String(lb.Id),
// 			Zone:        pulumi.String("GRA"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPLoadBalancingTCPFarm struct {
	pulumi.CustomResourceState

	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance pulumi.StringPtrOutput `pulumi:"balance"`
	// Readable label for loadbalancer farm
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Port for backends to recieve traffic on.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// define a backend healthcheck probe
	Probe IPLoadBalancingTCPFarmProbePtrOutput `pulumi:"probe"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Stickiness type. No stickiness if null (`sourceIp`)
	Stickiness pulumi.StringPtrOutput `pulumi:"stickiness"`
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId pulumi.IntPtrOutput `pulumi:"vrackNetworkId"`
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewIPLoadBalancingTCPFarm registers a new resource with the given unique name, arguments, and options.
func NewIPLoadBalancingTCPFarm(ctx *pulumi.Context,
	name string, args *IPLoadBalancingTCPFarmArgs, opts ...pulumi.ResourceOption) (*IPLoadBalancingTCPFarm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	var resource IPLoadBalancingTCPFarm
	err := ctx.RegisterResource("ovh:index/iPLoadBalancingTCPFarm:IPLoadBalancingTCPFarm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadBalancingTCPFarm gets an existing IPLoadBalancingTCPFarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadBalancingTCPFarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadBalancingTCPFarmState, opts ...pulumi.ResourceOption) (*IPLoadBalancingTCPFarm, error) {
	var resource IPLoadBalancingTCPFarm
	err := ctx.ReadResource("ovh:index/iPLoadBalancingTCPFarm:IPLoadBalancingTCPFarm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadBalancingTCPFarm resources.
type iploadBalancingTCPFarmState struct {
	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance *string `pulumi:"balance"`
	// Readable label for loadbalancer farm
	DisplayName *string `pulumi:"displayName"`
	// Port for backends to recieve traffic on.
	Port *int `pulumi:"port"`
	// define a backend healthcheck probe
	Probe *IPLoadBalancingTCPFarmProbe `pulumi:"probe"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// Stickiness type. No stickiness if null (`sourceIp`)
	Stickiness *string `pulumi:"stickiness"`
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId *int `pulumi:"vrackNetworkId"`
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone *string `pulumi:"zone"`
}

type IPLoadBalancingTCPFarmState struct {
	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance pulumi.StringPtrInput
	// Readable label for loadbalancer farm
	DisplayName pulumi.StringPtrInput
	// Port for backends to recieve traffic on.
	Port pulumi.IntPtrInput
	// define a backend healthcheck probe
	Probe IPLoadBalancingTCPFarmProbePtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// Stickiness type. No stickiness if null (`sourceIp`)
	Stickiness pulumi.StringPtrInput
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId pulumi.IntPtrInput
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone pulumi.StringPtrInput
}

func (IPLoadBalancingTCPFarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadBalancingTCPFarmState)(nil)).Elem()
}

type iploadBalancingTCPFarmArgs struct {
	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance *string `pulumi:"balance"`
	// Readable label for loadbalancer farm
	DisplayName *string `pulumi:"displayName"`
	// Port for backends to recieve traffic on.
	Port *int `pulumi:"port"`
	// define a backend healthcheck probe
	Probe *IPLoadBalancingTCPFarmProbe `pulumi:"probe"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Stickiness type. No stickiness if null (`sourceIp`)
	Stickiness *string `pulumi:"stickiness"`
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId *int `pulumi:"vrackNetworkId"`
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a IPLoadBalancingTCPFarm resource.
type IPLoadBalancingTCPFarmArgs struct {
	// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
	Balance pulumi.StringPtrInput
	// Readable label for loadbalancer farm
	DisplayName pulumi.StringPtrInput
	// Port for backends to recieve traffic on.
	Port pulumi.IntPtrInput
	// define a backend healthcheck probe
	Probe IPLoadBalancingTCPFarmProbePtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Stickiness type. No stickiness if null (`sourceIp`)
	Stickiness pulumi.StringPtrInput
	// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
	VrackNetworkId pulumi.IntPtrInput
	// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
	Zone pulumi.StringInput
}

func (IPLoadBalancingTCPFarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadBalancingTCPFarmArgs)(nil)).Elem()
}

type IPLoadBalancingTCPFarmInput interface {
	pulumi.Input

	ToIPLoadBalancingTCPFarmOutput() IPLoadBalancingTCPFarmOutput
	ToIPLoadBalancingTCPFarmOutputWithContext(ctx context.Context) IPLoadBalancingTCPFarmOutput
}

func (*IPLoadBalancingTCPFarm) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadBalancingTCPFarm)(nil)).Elem()
}

func (i *IPLoadBalancingTCPFarm) ToIPLoadBalancingTCPFarmOutput() IPLoadBalancingTCPFarmOutput {
	return i.ToIPLoadBalancingTCPFarmOutputWithContext(context.Background())
}

func (i *IPLoadBalancingTCPFarm) ToIPLoadBalancingTCPFarmOutputWithContext(ctx context.Context) IPLoadBalancingTCPFarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingTCPFarmOutput)
}

// IPLoadBalancingTCPFarmArrayInput is an input type that accepts IPLoadBalancingTCPFarmArray and IPLoadBalancingTCPFarmArrayOutput values.
// You can construct a concrete instance of `IPLoadBalancingTCPFarmArrayInput` via:
//
//          IPLoadBalancingTCPFarmArray{ IPLoadBalancingTCPFarmArgs{...} }
type IPLoadBalancingTCPFarmArrayInput interface {
	pulumi.Input

	ToIPLoadBalancingTCPFarmArrayOutput() IPLoadBalancingTCPFarmArrayOutput
	ToIPLoadBalancingTCPFarmArrayOutputWithContext(context.Context) IPLoadBalancingTCPFarmArrayOutput
}

type IPLoadBalancingTCPFarmArray []IPLoadBalancingTCPFarmInput

func (IPLoadBalancingTCPFarmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadBalancingTCPFarm)(nil)).Elem()
}

func (i IPLoadBalancingTCPFarmArray) ToIPLoadBalancingTCPFarmArrayOutput() IPLoadBalancingTCPFarmArrayOutput {
	return i.ToIPLoadBalancingTCPFarmArrayOutputWithContext(context.Background())
}

func (i IPLoadBalancingTCPFarmArray) ToIPLoadBalancingTCPFarmArrayOutputWithContext(ctx context.Context) IPLoadBalancingTCPFarmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingTCPFarmArrayOutput)
}

// IPLoadBalancingTCPFarmMapInput is an input type that accepts IPLoadBalancingTCPFarmMap and IPLoadBalancingTCPFarmMapOutput values.
// You can construct a concrete instance of `IPLoadBalancingTCPFarmMapInput` via:
//
//          IPLoadBalancingTCPFarmMap{ "key": IPLoadBalancingTCPFarmArgs{...} }
type IPLoadBalancingTCPFarmMapInput interface {
	pulumi.Input

	ToIPLoadBalancingTCPFarmMapOutput() IPLoadBalancingTCPFarmMapOutput
	ToIPLoadBalancingTCPFarmMapOutputWithContext(context.Context) IPLoadBalancingTCPFarmMapOutput
}

type IPLoadBalancingTCPFarmMap map[string]IPLoadBalancingTCPFarmInput

func (IPLoadBalancingTCPFarmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadBalancingTCPFarm)(nil)).Elem()
}

func (i IPLoadBalancingTCPFarmMap) ToIPLoadBalancingTCPFarmMapOutput() IPLoadBalancingTCPFarmMapOutput {
	return i.ToIPLoadBalancingTCPFarmMapOutputWithContext(context.Background())
}

func (i IPLoadBalancingTCPFarmMap) ToIPLoadBalancingTCPFarmMapOutputWithContext(ctx context.Context) IPLoadBalancingTCPFarmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingTCPFarmMapOutput)
}

type IPLoadBalancingTCPFarmOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingTCPFarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadBalancingTCPFarm)(nil)).Elem()
}

func (o IPLoadBalancingTCPFarmOutput) ToIPLoadBalancingTCPFarmOutput() IPLoadBalancingTCPFarmOutput {
	return o
}

func (o IPLoadBalancingTCPFarmOutput) ToIPLoadBalancingTCPFarmOutputWithContext(ctx context.Context) IPLoadBalancingTCPFarmOutput {
	return o
}

// Load balancing algorithm. `roundrobin` if null (`first`, `leastconn`, `roundrobin`, `source`)
func (o IPLoadBalancingTCPFarmOutput) Balance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPFarm) pulumi.StringPtrOutput { return v.Balance }).(pulumi.StringPtrOutput)
}

// Readable label for loadbalancer farm
func (o IPLoadBalancingTCPFarmOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPFarm) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Port for backends to recieve traffic on.
func (o IPLoadBalancingTCPFarmOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPFarm) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// define a backend healthcheck probe
func (o IPLoadBalancingTCPFarmOutput) Probe() IPLoadBalancingTCPFarmProbePtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPFarm) IPLoadBalancingTCPFarmProbePtrOutput { return v.Probe }).(IPLoadBalancingTCPFarmProbePtrOutput)
}

// The internal name of your IP load balancing
func (o IPLoadBalancingTCPFarmOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPFarm) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Stickiness type. No stickiness if null (`sourceIp`)
func (o IPLoadBalancingTCPFarmOutput) Stickiness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPFarm) pulumi.StringPtrOutput { return v.Stickiness }).(pulumi.StringPtrOutput)
}

// Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
func (o IPLoadBalancingTCPFarmOutput) VrackNetworkId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPFarm) pulumi.IntPtrOutput { return v.VrackNetworkId }).(pulumi.IntPtrOutput)
}

// Zone where the farm will be defined (ie. `GRA`, `BHS` also supports `ALL`)
func (o IPLoadBalancingTCPFarmOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPFarm) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type IPLoadBalancingTCPFarmArrayOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingTCPFarmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadBalancingTCPFarm)(nil)).Elem()
}

func (o IPLoadBalancingTCPFarmArrayOutput) ToIPLoadBalancingTCPFarmArrayOutput() IPLoadBalancingTCPFarmArrayOutput {
	return o
}

func (o IPLoadBalancingTCPFarmArrayOutput) ToIPLoadBalancingTCPFarmArrayOutputWithContext(ctx context.Context) IPLoadBalancingTCPFarmArrayOutput {
	return o
}

func (o IPLoadBalancingTCPFarmArrayOutput) Index(i pulumi.IntInput) IPLoadBalancingTCPFarmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadBalancingTCPFarm {
		return vs[0].([]*IPLoadBalancingTCPFarm)[vs[1].(int)]
	}).(IPLoadBalancingTCPFarmOutput)
}

type IPLoadBalancingTCPFarmMapOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingTCPFarmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadBalancingTCPFarm)(nil)).Elem()
}

func (o IPLoadBalancingTCPFarmMapOutput) ToIPLoadBalancingTCPFarmMapOutput() IPLoadBalancingTCPFarmMapOutput {
	return o
}

func (o IPLoadBalancingTCPFarmMapOutput) ToIPLoadBalancingTCPFarmMapOutputWithContext(ctx context.Context) IPLoadBalancingTCPFarmMapOutput {
	return o
}

func (o IPLoadBalancingTCPFarmMapOutput) MapIndex(k pulumi.StringInput) IPLoadBalancingTCPFarmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadBalancingTCPFarm {
		return vs[0].(map[string]*IPLoadBalancingTCPFarm)[vs[1].(string)]
	}).(IPLoadBalancingTCPFarmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingTCPFarmInput)(nil)).Elem(), &IPLoadBalancingTCPFarm{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingTCPFarmArrayInput)(nil)).Elem(), IPLoadBalancingTCPFarmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingTCPFarmMapInput)(nil)).Elem(), IPLoadBalancingTCPFarmMap{})
	pulumi.RegisterOutputType(IPLoadBalancingTCPFarmOutput{})
	pulumi.RegisterOutputType(IPLoadBalancingTCPFarmArrayOutput{})
	pulumi.RegisterOutputType(IPLoadBalancingTCPFarmMapOutput{})
}
