// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a backend http server group (frontend) to be used by loadbalancing frontend(s)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		lb, err := ovh.LookupIPLoadBalancing(ctx, &GetIPLoadBalancingArgs{
// 			ServiceName: pulumi.StringRef("ip-1.2.3.4"),
// 			State:       pulumi.StringRef("ok"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		farm80, err := ovh.NewIPLoadBalancingHTTPFarm(ctx, "farm80", &ovh.IPLoadBalancingHTTPFarmArgs{
// 			DisplayName: pulumi.String("ingress-8080-gra"),
// 			Port:        pulumi.Int(80),
// 			ServiceName: pulumi.String(lb.ServiceName),
// 			Zone:        pulumi.String("all"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewIPLoadBalancingHTTPFrontend(ctx, "testfrontend", &ovh.IPLoadBalancingHTTPFrontendArgs{
// 			DefaultFarmId: farm80.ID(),
// 			DisplayName:   pulumi.String("ingress-8080-gra"),
// 			Port:          pulumi.String("80,443"),
// 			ServiceName:   pulumi.String(lb.ServiceName),
// 			Zone:          pulumi.String("all"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPLoadBalancingHTTPFrontend struct {
	pulumi.CustomResourceState

	// Restrict IP Load Balancing access to these ip block. No restriction if null. List of IP blocks.
	AllowedSources pulumi.StringArrayOutput `pulumi:"allowedSources"`
	// Only attach frontend on these ip. No restriction if null. List of Ip blocks.
	DedicatedIpfos pulumi.StringArrayOutput `pulumi:"dedicatedIpfos"`
	// Default TCP Farm of your frontend
	DefaultFarmId pulumi.IntOutput `pulumi:"defaultFarmId"`
	// Default ssl served to your customer
	DefaultSslId pulumi.IntOutput `pulumi:"defaultSslId"`
	// Disable your frontend. Default: 'false'
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Human readable name for your frontend, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Port(s) attached to your frontend. Supports single port (numerical value),
	// range (2 dash-delimited increasing ports) and comma-separated list of 'single port'
	// and/or 'range'. Each port must be in the [1;49151] range
	Port pulumi.StringOutput `pulumi:"port"`
	// Redirection HTTP'
	RedirectLocation pulumi.StringPtrOutput `pulumi:"redirectLocation"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// SSL deciphering. Default: 'false'
	Ssl pulumi.BoolPtrOutput `pulumi:"ssl"`
	// Zone where the frontend will be defined (ie. `gra`, `bhs` also supports `all`)
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewIPLoadBalancingHTTPFrontend registers a new resource with the given unique name, arguments, and options.
func NewIPLoadBalancingHTTPFrontend(ctx *pulumi.Context,
	name string, args *IPLoadBalancingHTTPFrontendArgs, opts ...pulumi.ResourceOption) (*IPLoadBalancingHTTPFrontend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	var resource IPLoadBalancingHTTPFrontend
	err := ctx.RegisterResource("ovh:index/iPLoadBalancingHTTPFrontend:IPLoadBalancingHTTPFrontend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadBalancingHTTPFrontend gets an existing IPLoadBalancingHTTPFrontend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadBalancingHTTPFrontend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadBalancingHTTPFrontendState, opts ...pulumi.ResourceOption) (*IPLoadBalancingHTTPFrontend, error) {
	var resource IPLoadBalancingHTTPFrontend
	err := ctx.ReadResource("ovh:index/iPLoadBalancingHTTPFrontend:IPLoadBalancingHTTPFrontend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadBalancingHTTPFrontend resources.
type iploadBalancingHTTPFrontendState struct {
	// Restrict IP Load Balancing access to these ip block. No restriction if null. List of IP blocks.
	AllowedSources []string `pulumi:"allowedSources"`
	// Only attach frontend on these ip. No restriction if null. List of Ip blocks.
	DedicatedIpfos []string `pulumi:"dedicatedIpfos"`
	// Default TCP Farm of your frontend
	DefaultFarmId *int `pulumi:"defaultFarmId"`
	// Default ssl served to your customer
	DefaultSslId *int `pulumi:"defaultSslId"`
	// Disable your frontend. Default: 'false'
	Disabled *bool `pulumi:"disabled"`
	// Human readable name for your frontend, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Port(s) attached to your frontend. Supports single port (numerical value),
	// range (2 dash-delimited increasing ports) and comma-separated list of 'single port'
	// and/or 'range'. Each port must be in the [1;49151] range
	Port *string `pulumi:"port"`
	// Redirection HTTP'
	RedirectLocation *string `pulumi:"redirectLocation"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// SSL deciphering. Default: 'false'
	Ssl *bool `pulumi:"ssl"`
	// Zone where the frontend will be defined (ie. `gra`, `bhs` also supports `all`)
	Zone *string `pulumi:"zone"`
}

type IPLoadBalancingHTTPFrontendState struct {
	// Restrict IP Load Balancing access to these ip block. No restriction if null. List of IP blocks.
	AllowedSources pulumi.StringArrayInput
	// Only attach frontend on these ip. No restriction if null. List of Ip blocks.
	DedicatedIpfos pulumi.StringArrayInput
	// Default TCP Farm of your frontend
	DefaultFarmId pulumi.IntPtrInput
	// Default ssl served to your customer
	DefaultSslId pulumi.IntPtrInput
	// Disable your frontend. Default: 'false'
	Disabled pulumi.BoolPtrInput
	// Human readable name for your frontend, this field is for you
	DisplayName pulumi.StringPtrInput
	// Port(s) attached to your frontend. Supports single port (numerical value),
	// range (2 dash-delimited increasing ports) and comma-separated list of 'single port'
	// and/or 'range'. Each port must be in the [1;49151] range
	Port pulumi.StringPtrInput
	// Redirection HTTP'
	RedirectLocation pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// SSL deciphering. Default: 'false'
	Ssl pulumi.BoolPtrInput
	// Zone where the frontend will be defined (ie. `gra`, `bhs` also supports `all`)
	Zone pulumi.StringPtrInput
}

func (IPLoadBalancingHTTPFrontendState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadBalancingHTTPFrontendState)(nil)).Elem()
}

type iploadBalancingHTTPFrontendArgs struct {
	// Restrict IP Load Balancing access to these ip block. No restriction if null. List of IP blocks.
	AllowedSources []string `pulumi:"allowedSources"`
	// Only attach frontend on these ip. No restriction if null. List of Ip blocks.
	DedicatedIpfos []string `pulumi:"dedicatedIpfos"`
	// Default TCP Farm of your frontend
	DefaultFarmId *int `pulumi:"defaultFarmId"`
	// Default ssl served to your customer
	DefaultSslId *int `pulumi:"defaultSslId"`
	// Disable your frontend. Default: 'false'
	Disabled *bool `pulumi:"disabled"`
	// Human readable name for your frontend, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Port(s) attached to your frontend. Supports single port (numerical value),
	// range (2 dash-delimited increasing ports) and comma-separated list of 'single port'
	// and/or 'range'. Each port must be in the [1;49151] range
	Port string `pulumi:"port"`
	// Redirection HTTP'
	RedirectLocation *string `pulumi:"redirectLocation"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// SSL deciphering. Default: 'false'
	Ssl *bool `pulumi:"ssl"`
	// Zone where the frontend will be defined (ie. `gra`, `bhs` also supports `all`)
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a IPLoadBalancingHTTPFrontend resource.
type IPLoadBalancingHTTPFrontendArgs struct {
	// Restrict IP Load Balancing access to these ip block. No restriction if null. List of IP blocks.
	AllowedSources pulumi.StringArrayInput
	// Only attach frontend on these ip. No restriction if null. List of Ip blocks.
	DedicatedIpfos pulumi.StringArrayInput
	// Default TCP Farm of your frontend
	DefaultFarmId pulumi.IntPtrInput
	// Default ssl served to your customer
	DefaultSslId pulumi.IntPtrInput
	// Disable your frontend. Default: 'false'
	Disabled pulumi.BoolPtrInput
	// Human readable name for your frontend, this field is for you
	DisplayName pulumi.StringPtrInput
	// Port(s) attached to your frontend. Supports single port (numerical value),
	// range (2 dash-delimited increasing ports) and comma-separated list of 'single port'
	// and/or 'range'. Each port must be in the [1;49151] range
	Port pulumi.StringInput
	// Redirection HTTP'
	RedirectLocation pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// SSL deciphering. Default: 'false'
	Ssl pulumi.BoolPtrInput
	// Zone where the frontend will be defined (ie. `gra`, `bhs` also supports `all`)
	Zone pulumi.StringInput
}

func (IPLoadBalancingHTTPFrontendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadBalancingHTTPFrontendArgs)(nil)).Elem()
}

type IPLoadBalancingHTTPFrontendInput interface {
	pulumi.Input

	ToIPLoadBalancingHTTPFrontendOutput() IPLoadBalancingHTTPFrontendOutput
	ToIPLoadBalancingHTTPFrontendOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFrontendOutput
}

func (*IPLoadBalancingHTTPFrontend) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadBalancingHTTPFrontend)(nil)).Elem()
}

func (i *IPLoadBalancingHTTPFrontend) ToIPLoadBalancingHTTPFrontendOutput() IPLoadBalancingHTTPFrontendOutput {
	return i.ToIPLoadBalancingHTTPFrontendOutputWithContext(context.Background())
}

func (i *IPLoadBalancingHTTPFrontend) ToIPLoadBalancingHTTPFrontendOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFrontendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingHTTPFrontendOutput)
}

// IPLoadBalancingHTTPFrontendArrayInput is an input type that accepts IPLoadBalancingHTTPFrontendArray and IPLoadBalancingHTTPFrontendArrayOutput values.
// You can construct a concrete instance of `IPLoadBalancingHTTPFrontendArrayInput` via:
//
//          IPLoadBalancingHTTPFrontendArray{ IPLoadBalancingHTTPFrontendArgs{...} }
type IPLoadBalancingHTTPFrontendArrayInput interface {
	pulumi.Input

	ToIPLoadBalancingHTTPFrontendArrayOutput() IPLoadBalancingHTTPFrontendArrayOutput
	ToIPLoadBalancingHTTPFrontendArrayOutputWithContext(context.Context) IPLoadBalancingHTTPFrontendArrayOutput
}

type IPLoadBalancingHTTPFrontendArray []IPLoadBalancingHTTPFrontendInput

func (IPLoadBalancingHTTPFrontendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadBalancingHTTPFrontend)(nil)).Elem()
}

func (i IPLoadBalancingHTTPFrontendArray) ToIPLoadBalancingHTTPFrontendArrayOutput() IPLoadBalancingHTTPFrontendArrayOutput {
	return i.ToIPLoadBalancingHTTPFrontendArrayOutputWithContext(context.Background())
}

func (i IPLoadBalancingHTTPFrontendArray) ToIPLoadBalancingHTTPFrontendArrayOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFrontendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingHTTPFrontendArrayOutput)
}

// IPLoadBalancingHTTPFrontendMapInput is an input type that accepts IPLoadBalancingHTTPFrontendMap and IPLoadBalancingHTTPFrontendMapOutput values.
// You can construct a concrete instance of `IPLoadBalancingHTTPFrontendMapInput` via:
//
//          IPLoadBalancingHTTPFrontendMap{ "key": IPLoadBalancingHTTPFrontendArgs{...} }
type IPLoadBalancingHTTPFrontendMapInput interface {
	pulumi.Input

	ToIPLoadBalancingHTTPFrontendMapOutput() IPLoadBalancingHTTPFrontendMapOutput
	ToIPLoadBalancingHTTPFrontendMapOutputWithContext(context.Context) IPLoadBalancingHTTPFrontendMapOutput
}

type IPLoadBalancingHTTPFrontendMap map[string]IPLoadBalancingHTTPFrontendInput

func (IPLoadBalancingHTTPFrontendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadBalancingHTTPFrontend)(nil)).Elem()
}

func (i IPLoadBalancingHTTPFrontendMap) ToIPLoadBalancingHTTPFrontendMapOutput() IPLoadBalancingHTTPFrontendMapOutput {
	return i.ToIPLoadBalancingHTTPFrontendMapOutputWithContext(context.Background())
}

func (i IPLoadBalancingHTTPFrontendMap) ToIPLoadBalancingHTTPFrontendMapOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFrontendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingHTTPFrontendMapOutput)
}

type IPLoadBalancingHTTPFrontendOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingHTTPFrontendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadBalancingHTTPFrontend)(nil)).Elem()
}

func (o IPLoadBalancingHTTPFrontendOutput) ToIPLoadBalancingHTTPFrontendOutput() IPLoadBalancingHTTPFrontendOutput {
	return o
}

func (o IPLoadBalancingHTTPFrontendOutput) ToIPLoadBalancingHTTPFrontendOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFrontendOutput {
	return o
}

// Restrict IP Load Balancing access to these ip block. No restriction if null. List of IP blocks.
func (o IPLoadBalancingHTTPFrontendOutput) AllowedSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFrontend) pulumi.StringArrayOutput { return v.AllowedSources }).(pulumi.StringArrayOutput)
}

// Only attach frontend on these ip. No restriction if null. List of Ip blocks.
func (o IPLoadBalancingHTTPFrontendOutput) DedicatedIpfos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFrontend) pulumi.StringArrayOutput { return v.DedicatedIpfos }).(pulumi.StringArrayOutput)
}

// Default TCP Farm of your frontend
func (o IPLoadBalancingHTTPFrontendOutput) DefaultFarmId() pulumi.IntOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFrontend) pulumi.IntOutput { return v.DefaultFarmId }).(pulumi.IntOutput)
}

// Default ssl served to your customer
func (o IPLoadBalancingHTTPFrontendOutput) DefaultSslId() pulumi.IntOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFrontend) pulumi.IntOutput { return v.DefaultSslId }).(pulumi.IntOutput)
}

// Disable your frontend. Default: 'false'
func (o IPLoadBalancingHTTPFrontendOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFrontend) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Human readable name for your frontend, this field is for you
func (o IPLoadBalancingHTTPFrontendOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFrontend) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Port(s) attached to your frontend. Supports single port (numerical value),
// range (2 dash-delimited increasing ports) and comma-separated list of 'single port'
// and/or 'range'. Each port must be in the [1;49151] range
func (o IPLoadBalancingHTTPFrontendOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFrontend) pulumi.StringOutput { return v.Port }).(pulumi.StringOutput)
}

// Redirection HTTP'
func (o IPLoadBalancingHTTPFrontendOutput) RedirectLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFrontend) pulumi.StringPtrOutput { return v.RedirectLocation }).(pulumi.StringPtrOutput)
}

// The internal name of your IP load balancing
func (o IPLoadBalancingHTTPFrontendOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFrontend) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// SSL deciphering. Default: 'false'
func (o IPLoadBalancingHTTPFrontendOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFrontend) pulumi.BoolPtrOutput { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// Zone where the frontend will be defined (ie. `gra`, `bhs` also supports `all`)
func (o IPLoadBalancingHTTPFrontendOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPFrontend) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type IPLoadBalancingHTTPFrontendArrayOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingHTTPFrontendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadBalancingHTTPFrontend)(nil)).Elem()
}

func (o IPLoadBalancingHTTPFrontendArrayOutput) ToIPLoadBalancingHTTPFrontendArrayOutput() IPLoadBalancingHTTPFrontendArrayOutput {
	return o
}

func (o IPLoadBalancingHTTPFrontendArrayOutput) ToIPLoadBalancingHTTPFrontendArrayOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFrontendArrayOutput {
	return o
}

func (o IPLoadBalancingHTTPFrontendArrayOutput) Index(i pulumi.IntInput) IPLoadBalancingHTTPFrontendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadBalancingHTTPFrontend {
		return vs[0].([]*IPLoadBalancingHTTPFrontend)[vs[1].(int)]
	}).(IPLoadBalancingHTTPFrontendOutput)
}

type IPLoadBalancingHTTPFrontendMapOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingHTTPFrontendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadBalancingHTTPFrontend)(nil)).Elem()
}

func (o IPLoadBalancingHTTPFrontendMapOutput) ToIPLoadBalancingHTTPFrontendMapOutput() IPLoadBalancingHTTPFrontendMapOutput {
	return o
}

func (o IPLoadBalancingHTTPFrontendMapOutput) ToIPLoadBalancingHTTPFrontendMapOutputWithContext(ctx context.Context) IPLoadBalancingHTTPFrontendMapOutput {
	return o
}

func (o IPLoadBalancingHTTPFrontendMapOutput) MapIndex(k pulumi.StringInput) IPLoadBalancingHTTPFrontendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadBalancingHTTPFrontend {
		return vs[0].(map[string]*IPLoadBalancingHTTPFrontend)[vs[1].(string)]
	}).(IPLoadBalancingHTTPFrontendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingHTTPFrontendInput)(nil)).Elem(), &IPLoadBalancingHTTPFrontend{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingHTTPFrontendArrayInput)(nil)).Elem(), IPLoadBalancingHTTPFrontendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingHTTPFrontendMapInput)(nil)).Elem(), IPLoadBalancingHTTPFrontendMap{})
	pulumi.RegisterOutputType(IPLoadBalancingHTTPFrontendOutput{})
	pulumi.RegisterOutputType(IPLoadBalancingHTTPFrontendArrayOutput{})
	pulumi.RegisterOutputType(IPLoadBalancingHTTPFrontendMapOutput{})
}
