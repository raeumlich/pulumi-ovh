// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage tcp route for a loadbalancer service
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewIPLoadBalancingTCPRoute(ctx, "tcpreject", &ovh.IPLoadBalancingTCPRouteArgs{
// 			Action: &IPLoadBalancingTCPRouteActionArgs{
// 				Type: pulumi.String("reject"),
// 			},
// 			ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
// 			Weight:      pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPLoadBalancingTCPRoute struct {
	pulumi.CustomResourceState

	// Action triggered when all rules match
	Action IPLoadBalancingTCPRouteActionOutput `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId pulumi.IntOutput `pulumi:"frontendId"`
	// List of rules to match to trigger action
	Rules IPLoadBalancingTCPRouteRuleTypeArrayOutput `pulumi:"rules"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Route status. Routes in "ok" state are ready to operate
	Status pulumi.StringOutput `pulumi:"status"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewIPLoadBalancingTCPRoute registers a new resource with the given unique name, arguments, and options.
func NewIPLoadBalancingTCPRoute(ctx *pulumi.Context,
	name string, args *IPLoadBalancingTCPRouteArgs, opts ...pulumi.ResourceOption) (*IPLoadBalancingTCPRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource IPLoadBalancingTCPRoute
	err := ctx.RegisterResource("ovh:index/iPLoadBalancingTCPRoute:IPLoadBalancingTCPRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadBalancingTCPRoute gets an existing IPLoadBalancingTCPRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadBalancingTCPRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadBalancingTCPRouteState, opts ...pulumi.ResourceOption) (*IPLoadBalancingTCPRoute, error) {
	var resource IPLoadBalancingTCPRoute
	err := ctx.ReadResource("ovh:index/iPLoadBalancingTCPRoute:IPLoadBalancingTCPRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadBalancingTCPRoute resources.
type iploadBalancingTCPRouteState struct {
	// Action triggered when all rules match
	Action *IPLoadBalancingTCPRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *int `pulumi:"frontendId"`
	// List of rules to match to trigger action
	Rules []IPLoadBalancingTCPRouteRuleType `pulumi:"rules"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// Route status. Routes in "ok" state are ready to operate
	Status *string `pulumi:"status"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight *int `pulumi:"weight"`
}

type IPLoadBalancingTCPRouteState struct {
	// Action triggered when all rules match
	Action IPLoadBalancingTCPRouteActionPtrInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.IntPtrInput
	// List of rules to match to trigger action
	Rules IPLoadBalancingTCPRouteRuleTypeArrayInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// Route status. Routes in "ok" state are ready to operate
	Status pulumi.StringPtrInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight pulumi.IntPtrInput
}

func (IPLoadBalancingTCPRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadBalancingTCPRouteState)(nil)).Elem()
}

type iploadBalancingTCPRouteArgs struct {
	// Action triggered when all rules match
	Action IPLoadBalancingTCPRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *int `pulumi:"frontendId"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a IPLoadBalancingTCPRoute resource.
type IPLoadBalancingTCPRouteArgs struct {
	// Action triggered when all rules match
	Action IPLoadBalancingTCPRouteActionInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.IntPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight pulumi.IntPtrInput
}

func (IPLoadBalancingTCPRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadBalancingTCPRouteArgs)(nil)).Elem()
}

type IPLoadBalancingTCPRouteInput interface {
	pulumi.Input

	ToIPLoadBalancingTCPRouteOutput() IPLoadBalancingTCPRouteOutput
	ToIPLoadBalancingTCPRouteOutputWithContext(ctx context.Context) IPLoadBalancingTCPRouteOutput
}

func (*IPLoadBalancingTCPRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadBalancingTCPRoute)(nil)).Elem()
}

func (i *IPLoadBalancingTCPRoute) ToIPLoadBalancingTCPRouteOutput() IPLoadBalancingTCPRouteOutput {
	return i.ToIPLoadBalancingTCPRouteOutputWithContext(context.Background())
}

func (i *IPLoadBalancingTCPRoute) ToIPLoadBalancingTCPRouteOutputWithContext(ctx context.Context) IPLoadBalancingTCPRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingTCPRouteOutput)
}

// IPLoadBalancingTCPRouteArrayInput is an input type that accepts IPLoadBalancingTCPRouteArray and IPLoadBalancingTCPRouteArrayOutput values.
// You can construct a concrete instance of `IPLoadBalancingTCPRouteArrayInput` via:
//
//          IPLoadBalancingTCPRouteArray{ IPLoadBalancingTCPRouteArgs{...} }
type IPLoadBalancingTCPRouteArrayInput interface {
	pulumi.Input

	ToIPLoadBalancingTCPRouteArrayOutput() IPLoadBalancingTCPRouteArrayOutput
	ToIPLoadBalancingTCPRouteArrayOutputWithContext(context.Context) IPLoadBalancingTCPRouteArrayOutput
}

type IPLoadBalancingTCPRouteArray []IPLoadBalancingTCPRouteInput

func (IPLoadBalancingTCPRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadBalancingTCPRoute)(nil)).Elem()
}

func (i IPLoadBalancingTCPRouteArray) ToIPLoadBalancingTCPRouteArrayOutput() IPLoadBalancingTCPRouteArrayOutput {
	return i.ToIPLoadBalancingTCPRouteArrayOutputWithContext(context.Background())
}

func (i IPLoadBalancingTCPRouteArray) ToIPLoadBalancingTCPRouteArrayOutputWithContext(ctx context.Context) IPLoadBalancingTCPRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingTCPRouteArrayOutput)
}

// IPLoadBalancingTCPRouteMapInput is an input type that accepts IPLoadBalancingTCPRouteMap and IPLoadBalancingTCPRouteMapOutput values.
// You can construct a concrete instance of `IPLoadBalancingTCPRouteMapInput` via:
//
//          IPLoadBalancingTCPRouteMap{ "key": IPLoadBalancingTCPRouteArgs{...} }
type IPLoadBalancingTCPRouteMapInput interface {
	pulumi.Input

	ToIPLoadBalancingTCPRouteMapOutput() IPLoadBalancingTCPRouteMapOutput
	ToIPLoadBalancingTCPRouteMapOutputWithContext(context.Context) IPLoadBalancingTCPRouteMapOutput
}

type IPLoadBalancingTCPRouteMap map[string]IPLoadBalancingTCPRouteInput

func (IPLoadBalancingTCPRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadBalancingTCPRoute)(nil)).Elem()
}

func (i IPLoadBalancingTCPRouteMap) ToIPLoadBalancingTCPRouteMapOutput() IPLoadBalancingTCPRouteMapOutput {
	return i.ToIPLoadBalancingTCPRouteMapOutputWithContext(context.Background())
}

func (i IPLoadBalancingTCPRouteMap) ToIPLoadBalancingTCPRouteMapOutputWithContext(ctx context.Context) IPLoadBalancingTCPRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingTCPRouteMapOutput)
}

type IPLoadBalancingTCPRouteOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingTCPRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadBalancingTCPRoute)(nil)).Elem()
}

func (o IPLoadBalancingTCPRouteOutput) ToIPLoadBalancingTCPRouteOutput() IPLoadBalancingTCPRouteOutput {
	return o
}

func (o IPLoadBalancingTCPRouteOutput) ToIPLoadBalancingTCPRouteOutputWithContext(ctx context.Context) IPLoadBalancingTCPRouteOutput {
	return o
}

// Action triggered when all rules match
func (o IPLoadBalancingTCPRouteOutput) Action() IPLoadBalancingTCPRouteActionOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPRoute) IPLoadBalancingTCPRouteActionOutput { return v.Action }).(IPLoadBalancingTCPRouteActionOutput)
}

// Human readable name for your route, this field is for you
func (o IPLoadBalancingTCPRouteOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPRoute) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Route traffic for this frontend
func (o IPLoadBalancingTCPRouteOutput) FrontendId() pulumi.IntOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPRoute) pulumi.IntOutput { return v.FrontendId }).(pulumi.IntOutput)
}

// List of rules to match to trigger action
func (o IPLoadBalancingTCPRouteOutput) Rules() IPLoadBalancingTCPRouteRuleTypeArrayOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPRoute) IPLoadBalancingTCPRouteRuleTypeArrayOutput { return v.Rules }).(IPLoadBalancingTCPRouteRuleTypeArrayOutput)
}

// The internal name of your IP load balancing
func (o IPLoadBalancingTCPRouteOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPRoute) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Route status. Routes in "ok" state are ready to operate
func (o IPLoadBalancingTCPRouteOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPRoute) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
func (o IPLoadBalancingTCPRouteOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *IPLoadBalancingTCPRoute) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type IPLoadBalancingTCPRouteArrayOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingTCPRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadBalancingTCPRoute)(nil)).Elem()
}

func (o IPLoadBalancingTCPRouteArrayOutput) ToIPLoadBalancingTCPRouteArrayOutput() IPLoadBalancingTCPRouteArrayOutput {
	return o
}

func (o IPLoadBalancingTCPRouteArrayOutput) ToIPLoadBalancingTCPRouteArrayOutputWithContext(ctx context.Context) IPLoadBalancingTCPRouteArrayOutput {
	return o
}

func (o IPLoadBalancingTCPRouteArrayOutput) Index(i pulumi.IntInput) IPLoadBalancingTCPRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadBalancingTCPRoute {
		return vs[0].([]*IPLoadBalancingTCPRoute)[vs[1].(int)]
	}).(IPLoadBalancingTCPRouteOutput)
}

type IPLoadBalancingTCPRouteMapOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingTCPRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadBalancingTCPRoute)(nil)).Elem()
}

func (o IPLoadBalancingTCPRouteMapOutput) ToIPLoadBalancingTCPRouteMapOutput() IPLoadBalancingTCPRouteMapOutput {
	return o
}

func (o IPLoadBalancingTCPRouteMapOutput) ToIPLoadBalancingTCPRouteMapOutputWithContext(ctx context.Context) IPLoadBalancingTCPRouteMapOutput {
	return o
}

func (o IPLoadBalancingTCPRouteMapOutput) MapIndex(k pulumi.StringInput) IPLoadBalancingTCPRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadBalancingTCPRoute {
		return vs[0].(map[string]*IPLoadBalancingTCPRoute)[vs[1].(string)]
	}).(IPLoadBalancingTCPRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingTCPRouteInput)(nil)).Elem(), &IPLoadBalancingTCPRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingTCPRouteArrayInput)(nil)).Elem(), IPLoadBalancingTCPRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingTCPRouteMapInput)(nil)).Elem(), IPLoadBalancingTCPRouteMap{})
	pulumi.RegisterOutputType(IPLoadBalancingTCPRouteOutput{})
	pulumi.RegisterOutputType(IPLoadBalancingTCPRouteArrayOutput{})
	pulumi.RegisterOutputType(IPLoadBalancingTCPRouteMapOutput{})
}
