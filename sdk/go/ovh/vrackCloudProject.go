// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach a Public Cloud Project to a VRack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewVRackCloudProject(ctx, "vcp", &ovh.VRackCloudProjectArgs{
// 			ProjectId:   pulumi.String("67890"),
// 			ServiceName: pulumi.String("12345"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VRackCloudProject struct {
	pulumi.CustomResourceState

	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVRackCloudProject registers a new resource with the given unique name, arguments, and options.
func NewVRackCloudProject(ctx *pulumi.Context,
	name string, args *VRackCloudProjectArgs, opts ...pulumi.ResourceOption) (*VRackCloudProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource VRackCloudProject
	err := ctx.RegisterResource("ovh:index/vRackCloudProject:VRackCloudProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVRackCloudProject gets an existing VRackCloudProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVRackCloudProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VRackCloudProjectState, opts ...pulumi.ResourceOption) (*VRackCloudProject, error) {
	var resource VRackCloudProject
	err := ctx.ReadResource("ovh:index/vRackCloudProject:VRackCloudProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VRackCloudProject resources.
type vrackCloudProjectState struct {
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ProjectId *string `pulumi:"projectId"`
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName *string `pulumi:"serviceName"`
}

type VRackCloudProjectState struct {
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ProjectId pulumi.StringPtrInput
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName pulumi.StringPtrInput
}

func (VRackCloudProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackCloudProjectState)(nil)).Elem()
}

type vrackCloudProjectArgs struct {
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ProjectId string `pulumi:"projectId"`
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VRackCloudProject resource.
type VRackCloudProjectArgs struct {
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ProjectId pulumi.StringInput
	// The id of the vrack. If omitted,
	// the `OVH_VRACK_SERVICE` environment variable is used.
	ServiceName pulumi.StringInput
}

func (VRackCloudProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackCloudProjectArgs)(nil)).Elem()
}

type VRackCloudProjectInput interface {
	pulumi.Input

	ToVRackCloudProjectOutput() VRackCloudProjectOutput
	ToVRackCloudProjectOutputWithContext(ctx context.Context) VRackCloudProjectOutput
}

func (*VRackCloudProject) ElementType() reflect.Type {
	return reflect.TypeOf((**VRackCloudProject)(nil)).Elem()
}

func (i *VRackCloudProject) ToVRackCloudProjectOutput() VRackCloudProjectOutput {
	return i.ToVRackCloudProjectOutputWithContext(context.Background())
}

func (i *VRackCloudProject) ToVRackCloudProjectOutputWithContext(ctx context.Context) VRackCloudProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackCloudProjectOutput)
}

// VRackCloudProjectArrayInput is an input type that accepts VRackCloudProjectArray and VRackCloudProjectArrayOutput values.
// You can construct a concrete instance of `VRackCloudProjectArrayInput` via:
//
//          VRackCloudProjectArray{ VRackCloudProjectArgs{...} }
type VRackCloudProjectArrayInput interface {
	pulumi.Input

	ToVRackCloudProjectArrayOutput() VRackCloudProjectArrayOutput
	ToVRackCloudProjectArrayOutputWithContext(context.Context) VRackCloudProjectArrayOutput
}

type VRackCloudProjectArray []VRackCloudProjectInput

func (VRackCloudProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRackCloudProject)(nil)).Elem()
}

func (i VRackCloudProjectArray) ToVRackCloudProjectArrayOutput() VRackCloudProjectArrayOutput {
	return i.ToVRackCloudProjectArrayOutputWithContext(context.Background())
}

func (i VRackCloudProjectArray) ToVRackCloudProjectArrayOutputWithContext(ctx context.Context) VRackCloudProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackCloudProjectArrayOutput)
}

// VRackCloudProjectMapInput is an input type that accepts VRackCloudProjectMap and VRackCloudProjectMapOutput values.
// You can construct a concrete instance of `VRackCloudProjectMapInput` via:
//
//          VRackCloudProjectMap{ "key": VRackCloudProjectArgs{...} }
type VRackCloudProjectMapInput interface {
	pulumi.Input

	ToVRackCloudProjectMapOutput() VRackCloudProjectMapOutput
	ToVRackCloudProjectMapOutputWithContext(context.Context) VRackCloudProjectMapOutput
}

type VRackCloudProjectMap map[string]VRackCloudProjectInput

func (VRackCloudProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRackCloudProject)(nil)).Elem()
}

func (i VRackCloudProjectMap) ToVRackCloudProjectMapOutput() VRackCloudProjectMapOutput {
	return i.ToVRackCloudProjectMapOutputWithContext(context.Background())
}

func (i VRackCloudProjectMap) ToVRackCloudProjectMapOutputWithContext(ctx context.Context) VRackCloudProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackCloudProjectMapOutput)
}

type VRackCloudProjectOutput struct{ *pulumi.OutputState }

func (VRackCloudProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VRackCloudProject)(nil)).Elem()
}

func (o VRackCloudProjectOutput) ToVRackCloudProjectOutput() VRackCloudProjectOutput {
	return o
}

func (o VRackCloudProjectOutput) ToVRackCloudProjectOutputWithContext(ctx context.Context) VRackCloudProjectOutput {
	return o
}

// The id of the public cloud project. If omitted,
// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
func (o VRackCloudProjectOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *VRackCloudProject) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The id of the vrack. If omitted,
// the `OVH_VRACK_SERVICE` environment variable is used.
func (o VRackCloudProjectOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VRackCloudProject) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type VRackCloudProjectArrayOutput struct{ *pulumi.OutputState }

func (VRackCloudProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRackCloudProject)(nil)).Elem()
}

func (o VRackCloudProjectArrayOutput) ToVRackCloudProjectArrayOutput() VRackCloudProjectArrayOutput {
	return o
}

func (o VRackCloudProjectArrayOutput) ToVRackCloudProjectArrayOutputWithContext(ctx context.Context) VRackCloudProjectArrayOutput {
	return o
}

func (o VRackCloudProjectArrayOutput) Index(i pulumi.IntInput) VRackCloudProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VRackCloudProject {
		return vs[0].([]*VRackCloudProject)[vs[1].(int)]
	}).(VRackCloudProjectOutput)
}

type VRackCloudProjectMapOutput struct{ *pulumi.OutputState }

func (VRackCloudProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRackCloudProject)(nil)).Elem()
}

func (o VRackCloudProjectMapOutput) ToVRackCloudProjectMapOutput() VRackCloudProjectMapOutput {
	return o
}

func (o VRackCloudProjectMapOutput) ToVRackCloudProjectMapOutputWithContext(ctx context.Context) VRackCloudProjectMapOutput {
	return o
}

func (o VRackCloudProjectMapOutput) MapIndex(k pulumi.StringInput) VRackCloudProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VRackCloudProject {
		return vs[0].(map[string]*VRackCloudProject)[vs[1].(string)]
	}).(VRackCloudProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VRackCloudProjectInput)(nil)).Elem(), &VRackCloudProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRackCloudProjectArrayInput)(nil)).Elem(), VRackCloudProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRackCloudProjectMapInput)(nil)).Elem(), VRackCloudProjectMap{})
	pulumi.RegisterOutputType(VRackCloudProjectOutput{})
	pulumi.RegisterOutputType(VRackCloudProjectArrayOutput{})
	pulumi.RegisterOutputType(VRackCloudProjectMapOutput{})
}
