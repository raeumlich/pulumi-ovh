// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "ovh:index/cloudProject:CloudProject":
		r = &CloudProject{}
	case "ovh:index/cloudProjectContainerRegistry:CloudProjectContainerRegistry":
		r = &CloudProjectContainerRegistry{}
	case "ovh:index/cloudProjectContainerRegistryUser:CloudProjectContainerRegistryUser":
		r = &CloudProjectContainerRegistryUser{}
	case "ovh:index/cloudProjectFailoverIPAttach:CloudProjectFailoverIPAttach":
		r = &CloudProjectFailoverIPAttach{}
	case "ovh:index/cloudProjectKube:CloudProjectKube":
		r = &CloudProjectKube{}
	case "ovh:index/cloudProjectKubeNodepool:CloudProjectKubeNodepool":
		r = &CloudProjectKubeNodepool{}
	case "ovh:index/cloudProjectNetworkPrivate:CloudProjectNetworkPrivate":
		r = &CloudProjectNetworkPrivate{}
	case "ovh:index/cloudProjectNetworkPrivateSubnet:CloudProjectNetworkPrivateSubnet":
		r = &CloudProjectNetworkPrivateSubnet{}
	case "ovh:index/cloudProjectUser:CloudProjectUser":
		r = &CloudProjectUser{}
	case "ovh:index/dBaaSLogsInput:DBaaSLogsInput":
		r = &DBaaSLogsInput{}
	case "ovh:index/dBaaSLogsOutputGraylogStream:DBaaSLogsOutputGraylogStream":
		r = &DBaaSLogsOutputGraylogStream{}
	case "ovh:index/dedicatedCephACL:DedicatedCephACL":
		r = &DedicatedCephACL{}
	case "ovh:index/dedicatedServerInstallTask:DedicatedServerInstallTask":
		r = &DedicatedServerInstallTask{}
	case "ovh:index/dedicatedServerRebootTask:DedicatedServerRebootTask":
		r = &DedicatedServerRebootTask{}
	case "ovh:index/dedicatedServerUpdate:DedicatedServerUpdate":
		r = &DedicatedServerUpdate{}
	case "ovh:index/domainZone:DomainZone":
		r = &DomainZone{}
	case "ovh:index/domainZoneRecord:DomainZoneRecord":
		r = &DomainZoneRecord{}
	case "ovh:index/domainZoneRedirection:DomainZoneRedirection":
		r = &DomainZoneRedirection{}
	case "ovh:index/iPLoadBalancing:IPLoadBalancing":
		r = &IPLoadBalancing{}
	case "ovh:index/iPLoadBalancingHTTPFarm:IPLoadBalancingHTTPFarm":
		r = &IPLoadBalancingHTTPFarm{}
	case "ovh:index/iPLoadBalancingHTTPFarmServer:IPLoadBalancingHTTPFarmServer":
		r = &IPLoadBalancingHTTPFarmServer{}
	case "ovh:index/iPLoadBalancingHTTPFrontend:IPLoadBalancingHTTPFrontend":
		r = &IPLoadBalancingHTTPFrontend{}
	case "ovh:index/iPLoadBalancingHTTPRoute:IPLoadBalancingHTTPRoute":
		r = &IPLoadBalancingHTTPRoute{}
	case "ovh:index/iPLoadBalancingHTTPRouteRule:IPLoadBalancingHTTPRouteRule":
		r = &IPLoadBalancingHTTPRouteRule{}
	case "ovh:index/iPLoadBalancingRefresh:IPLoadBalancingRefresh":
		r = &IPLoadBalancingRefresh{}
	case "ovh:index/iPLoadBalancingTCPFarm:IPLoadBalancingTCPFarm":
		r = &IPLoadBalancingTCPFarm{}
	case "ovh:index/iPLoadBalancingTCPFarmServer:IPLoadBalancingTCPFarmServer":
		r = &IPLoadBalancingTCPFarmServer{}
	case "ovh:index/iPLoadBalancingTCPFrontend:IPLoadBalancingTCPFrontend":
		r = &IPLoadBalancingTCPFrontend{}
	case "ovh:index/iPLoadBalancingTCPRoute:IPLoadBalancingTCPRoute":
		r = &IPLoadBalancingTCPRoute{}
	case "ovh:index/iPLoadBalancingTCPRouteRule:IPLoadBalancingTCPRouteRule":
		r = &IPLoadBalancingTCPRouteRule{}
	case "ovh:index/iPLoadBalancingVRackNetwork:IPLoadBalancingVRackNetwork":
		r = &IPLoadBalancingVRackNetwork{}
	case "ovh:index/iPReverse:IPReverse":
		r = &IPReverse{}
	case "ovh:index/iPService:IPService":
		r = &IPService{}
	case "ovh:index/iPXEScript:IPXEScript":
		r = &IPXEScript{}
	case "ovh:index/meIdentityUser:MeIdentityUser":
		r = &MeIdentityUser{}
	case "ovh:index/meInstallationTemplate:MeInstallationTemplate":
		r = &MeInstallationTemplate{}
	case "ovh:index/meInstallationTemplatePartitionScheme:MeInstallationTemplatePartitionScheme":
		r = &MeInstallationTemplatePartitionScheme{}
	case "ovh:index/meInstallationTemplatePartitionSchemeHardwareRAID:MeInstallationTemplatePartitionSchemeHardwareRAID":
		r = &MeInstallationTemplatePartitionSchemeHardwareRAID{}
	case "ovh:index/meInstallationTemplatePartitionSchemePartition:MeInstallationTemplatePartitionSchemePartition":
		r = &MeInstallationTemplatePartitionSchemePartition{}
	case "ovh:index/meSSHKey:MeSSHKey":
		r = &MeSSHKey{}
	case "ovh:index/vRack:VRack":
		r = &VRack{}
	case "ovh:index/vRackCloudProject:VRackCloudProject":
		r = &VRackCloudProject{}
	case "ovh:index/vRackDedicatedServer:VRackDedicatedServer":
		r = &VRackDedicatedServer{}
	case "ovh:index/vRackDedicatedServerInterface:VRackDedicatedServerInterface":
		r = &VRackDedicatedServerInterface{}
	case "ovh:index/vRackIP:VRackIP":
		r = &VRackIP{}
	case "ovh:index/vRackIPLoadBalancing:VRackIPLoadBalancing":
		r = &VRackIPLoadBalancing{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:ovh" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, _ := PkgVersion()
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectContainerRegistry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectContainerRegistryUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectFailoverIPAttach",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectKube",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectKubeNodepool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectNetworkPrivate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectNetworkPrivateSubnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/cloudProjectUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dBaaSLogsInput",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dBaaSLogsOutputGraylogStream",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dedicatedCephACL",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dedicatedServerInstallTask",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dedicatedServerRebootTask",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/dedicatedServerUpdate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/domainZone",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/domainZoneRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/domainZoneRedirection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancing",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancingHTTPFarm",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancingHTTPFarmServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancingHTTPFrontend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancingHTTPRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancingHTTPRouteRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancingRefresh",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancingTCPFarm",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancingTCPFarmServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancingTCPFrontend",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancingTCPRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancingTCPRouteRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPLoadBalancingVRackNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPReverse",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/iPXEScript",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meIdentityUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meInstallationTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meInstallationTemplatePartitionScheme",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meInstallationTemplatePartitionSchemeHardwareRAID",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meInstallationTemplatePartitionSchemePartition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/meSSHKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vRack",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vRackCloudProject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vRackDedicatedServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vRackDedicatedServerInterface",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vRackIP",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"ovh",
		"index/vRackIPLoadBalancing",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"ovh",
		&pkg{version},
	)
}
