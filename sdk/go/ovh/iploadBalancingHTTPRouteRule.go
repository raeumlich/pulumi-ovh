// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage rules for HTTP route.
//
// ## Example Usage
//
// Route which redirect all url to https for example.com (Vhost).
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		httpsredirect, err := ovh.NewIPLoadBalancingHTTPRoute(ctx, "httpsredirect", &ovh.IPLoadBalancingHTTPRouteArgs{
// 			Action: &IPLoadBalancingHTTPRouteActionArgs{
// 				Status: pulumi.Int(302),
// 				Target: pulumi.String(fmt.Sprintf("%v%v%v%v", "https://", host, path, arguments)),
// 				Type:   pulumi.String("redirect"),
// 			},
// 			DisplayName: pulumi.String("Redirect to HTTPS"),
// 			FrontendId:  pulumi.Int(11111),
// 			ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
// 			Weight:      pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewIPLoadBalancingHTTPRouteRule(ctx, "examplerule", &ovh.IPLoadBalancingHTTPRouteRuleArgs{
// 			DisplayName: pulumi.String("Match example.com host"),
// 			Field:       pulumi.String("host"),
// 			Match:       pulumi.String("is"),
// 			Negate:      pulumi.Bool(false),
// 			Pattern:     pulumi.String("example.com"),
// 			RouteId:     httpsredirect.ID(),
// 			ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Rule which match a specific header (same effect as the host match above).
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewIPLoadBalancingHTTPRouteRule(ctx, "examplerule", &ovh.IPLoadBalancingHTTPRouteRuleArgs{
// 			DisplayName: pulumi.String("Match example.com Host header"),
// 			Field:       pulumi.String("headers"),
// 			Match:       pulumi.String("is"),
// 			Negate:      pulumi.Bool(false),
// 			Pattern:     pulumi.String("example.com"),
// 			RouteId:     pulumi.Any(ovh_iploadbalancing_http_route.Httpsredirect.Id),
// 			ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
// 			SubField:    pulumi.String("Host"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPLoadBalancingHTTPRouteRule struct {
	pulumi.CustomResourceState

	// Human readable name for your rule, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field pulumi.StringOutput `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match pulumi.StringOutput `pulumi:"match"`
	// Invert the matching operator effect
	Negate pulumi.BoolOutput `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// The route to apply this rule
	RouteId pulumi.StringOutput `pulumi:"routeId"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField pulumi.StringPtrOutput `pulumi:"subField"`
}

// NewIPLoadBalancingHTTPRouteRule registers a new resource with the given unique name, arguments, and options.
func NewIPLoadBalancingHTTPRouteRule(ctx *pulumi.Context,
	name string, args *IPLoadBalancingHTTPRouteRuleArgs, opts ...pulumi.ResourceOption) (*IPLoadBalancingHTTPRouteRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Field == nil {
		return nil, errors.New("invalid value for required argument 'Field'")
	}
	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	if args.RouteId == nil {
		return nil, errors.New("invalid value for required argument 'RouteId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource IPLoadBalancingHTTPRouteRule
	err := ctx.RegisterResource("ovh:index/iPLoadBalancingHTTPRouteRule:IPLoadBalancingHTTPRouteRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadBalancingHTTPRouteRule gets an existing IPLoadBalancingHTTPRouteRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadBalancingHTTPRouteRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadBalancingHTTPRouteRuleState, opts ...pulumi.ResourceOption) (*IPLoadBalancingHTTPRouteRule, error) {
	var resource IPLoadBalancingHTTPRouteRule
	err := ctx.ReadResource("ovh:index/iPLoadBalancingHTTPRouteRule:IPLoadBalancingHTTPRouteRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadBalancingHTTPRouteRule resources.
type iploadBalancingHTTPRouteRuleState struct {
	// Human readable name for your rule, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field *string `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match *string `pulumi:"match"`
	// Invert the matching operator effect
	Negate *bool `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern *string `pulumi:"pattern"`
	// The route to apply this rule
	RouteId *string `pulumi:"routeId"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField *string `pulumi:"subField"`
}

type IPLoadBalancingHTTPRouteRuleState struct {
	// Human readable name for your rule, this field is for you
	DisplayName pulumi.StringPtrInput
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field pulumi.StringPtrInput
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match pulumi.StringPtrInput
	// Invert the matching operator effect
	Negate pulumi.BoolPtrInput
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern pulumi.StringPtrInput
	// The route to apply this rule
	RouteId pulumi.StringPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField pulumi.StringPtrInput
}

func (IPLoadBalancingHTTPRouteRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadBalancingHTTPRouteRuleState)(nil)).Elem()
}

type iploadBalancingHTTPRouteRuleArgs struct {
	// Human readable name for your rule, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field string `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match string `pulumi:"match"`
	// Invert the matching operator effect
	Negate *bool `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern *string `pulumi:"pattern"`
	// The route to apply this rule
	RouteId string `pulumi:"routeId"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField *string `pulumi:"subField"`
}

// The set of arguments for constructing a IPLoadBalancingHTTPRouteRule resource.
type IPLoadBalancingHTTPRouteRuleArgs struct {
	// Human readable name for your rule, this field is for you
	DisplayName pulumi.StringPtrInput
	// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
	Field pulumi.StringInput
	// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
	Match pulumi.StringInput
	// Invert the matching operator effect
	Negate pulumi.BoolPtrInput
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern pulumi.StringPtrInput
	// The route to apply this rule
	RouteId pulumi.StringInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField pulumi.StringPtrInput
}

func (IPLoadBalancingHTTPRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadBalancingHTTPRouteRuleArgs)(nil)).Elem()
}

type IPLoadBalancingHTTPRouteRuleInput interface {
	pulumi.Input

	ToIPLoadBalancingHTTPRouteRuleOutput() IPLoadBalancingHTTPRouteRuleOutput
	ToIPLoadBalancingHTTPRouteRuleOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteRuleOutput
}

func (*IPLoadBalancingHTTPRouteRule) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadBalancingHTTPRouteRule)(nil)).Elem()
}

func (i *IPLoadBalancingHTTPRouteRule) ToIPLoadBalancingHTTPRouteRuleOutput() IPLoadBalancingHTTPRouteRuleOutput {
	return i.ToIPLoadBalancingHTTPRouteRuleOutputWithContext(context.Background())
}

func (i *IPLoadBalancingHTTPRouteRule) ToIPLoadBalancingHTTPRouteRuleOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingHTTPRouteRuleOutput)
}

// IPLoadBalancingHTTPRouteRuleArrayInput is an input type that accepts IPLoadBalancingHTTPRouteRuleArray and IPLoadBalancingHTTPRouteRuleArrayOutput values.
// You can construct a concrete instance of `IPLoadBalancingHTTPRouteRuleArrayInput` via:
//
//          IPLoadBalancingHTTPRouteRuleArray{ IPLoadBalancingHTTPRouteRuleArgs{...} }
type IPLoadBalancingHTTPRouteRuleArrayInput interface {
	pulumi.Input

	ToIPLoadBalancingHTTPRouteRuleArrayOutput() IPLoadBalancingHTTPRouteRuleArrayOutput
	ToIPLoadBalancingHTTPRouteRuleArrayOutputWithContext(context.Context) IPLoadBalancingHTTPRouteRuleArrayOutput
}

type IPLoadBalancingHTTPRouteRuleArray []IPLoadBalancingHTTPRouteRuleInput

func (IPLoadBalancingHTTPRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadBalancingHTTPRouteRule)(nil)).Elem()
}

func (i IPLoadBalancingHTTPRouteRuleArray) ToIPLoadBalancingHTTPRouteRuleArrayOutput() IPLoadBalancingHTTPRouteRuleArrayOutput {
	return i.ToIPLoadBalancingHTTPRouteRuleArrayOutputWithContext(context.Background())
}

func (i IPLoadBalancingHTTPRouteRuleArray) ToIPLoadBalancingHTTPRouteRuleArrayOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingHTTPRouteRuleArrayOutput)
}

// IPLoadBalancingHTTPRouteRuleMapInput is an input type that accepts IPLoadBalancingHTTPRouteRuleMap and IPLoadBalancingHTTPRouteRuleMapOutput values.
// You can construct a concrete instance of `IPLoadBalancingHTTPRouteRuleMapInput` via:
//
//          IPLoadBalancingHTTPRouteRuleMap{ "key": IPLoadBalancingHTTPRouteRuleArgs{...} }
type IPLoadBalancingHTTPRouteRuleMapInput interface {
	pulumi.Input

	ToIPLoadBalancingHTTPRouteRuleMapOutput() IPLoadBalancingHTTPRouteRuleMapOutput
	ToIPLoadBalancingHTTPRouteRuleMapOutputWithContext(context.Context) IPLoadBalancingHTTPRouteRuleMapOutput
}

type IPLoadBalancingHTTPRouteRuleMap map[string]IPLoadBalancingHTTPRouteRuleInput

func (IPLoadBalancingHTTPRouteRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadBalancingHTTPRouteRule)(nil)).Elem()
}

func (i IPLoadBalancingHTTPRouteRuleMap) ToIPLoadBalancingHTTPRouteRuleMapOutput() IPLoadBalancingHTTPRouteRuleMapOutput {
	return i.ToIPLoadBalancingHTTPRouteRuleMapOutputWithContext(context.Background())
}

func (i IPLoadBalancingHTTPRouteRuleMap) ToIPLoadBalancingHTTPRouteRuleMapOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingHTTPRouteRuleMapOutput)
}

type IPLoadBalancingHTTPRouteRuleOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingHTTPRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadBalancingHTTPRouteRule)(nil)).Elem()
}

func (o IPLoadBalancingHTTPRouteRuleOutput) ToIPLoadBalancingHTTPRouteRuleOutput() IPLoadBalancingHTTPRouteRuleOutput {
	return o
}

func (o IPLoadBalancingHTTPRouteRuleOutput) ToIPLoadBalancingHTTPRouteRuleOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteRuleOutput {
	return o
}

// Human readable name for your rule, this field is for you
func (o IPLoadBalancingHTTPRouteRuleOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRouteRule) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/availableRouteRules" for a list of available rules
func (o IPLoadBalancingHTTPRouteRuleOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRouteRule) pulumi.StringOutput { return v.Field }).(pulumi.StringOutput)
}

// Matching operator. Not all operators are available for all fields. See "/ipLoadbalancing/{serviceName}/availableRouteRules"
func (o IPLoadBalancingHTTPRouteRuleOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRouteRule) pulumi.StringOutput { return v.Match }).(pulumi.StringOutput)
}

// Invert the matching operator effect
func (o IPLoadBalancingHTTPRouteRuleOutput) Negate() pulumi.BoolOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRouteRule) pulumi.BoolOutput { return v.Negate }).(pulumi.BoolOutput)
}

// Value to match against this match. Interpretation if this field depends on the match and field
func (o IPLoadBalancingHTTPRouteRuleOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRouteRule) pulumi.StringPtrOutput { return v.Pattern }).(pulumi.StringPtrOutput)
}

// The route to apply this rule
func (o IPLoadBalancingHTTPRouteRuleOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRouteRule) pulumi.StringOutput { return v.RouteId }).(pulumi.StringOutput)
}

// The internal name of your IP load balancing
func (o IPLoadBalancingHTTPRouteRuleOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRouteRule) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
func (o IPLoadBalancingHTTPRouteRuleOutput) SubField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRouteRule) pulumi.StringPtrOutput { return v.SubField }).(pulumi.StringPtrOutput)
}

type IPLoadBalancingHTTPRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingHTTPRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadBalancingHTTPRouteRule)(nil)).Elem()
}

func (o IPLoadBalancingHTTPRouteRuleArrayOutput) ToIPLoadBalancingHTTPRouteRuleArrayOutput() IPLoadBalancingHTTPRouteRuleArrayOutput {
	return o
}

func (o IPLoadBalancingHTTPRouteRuleArrayOutput) ToIPLoadBalancingHTTPRouteRuleArrayOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteRuleArrayOutput {
	return o
}

func (o IPLoadBalancingHTTPRouteRuleArrayOutput) Index(i pulumi.IntInput) IPLoadBalancingHTTPRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadBalancingHTTPRouteRule {
		return vs[0].([]*IPLoadBalancingHTTPRouteRule)[vs[1].(int)]
	}).(IPLoadBalancingHTTPRouteRuleOutput)
}

type IPLoadBalancingHTTPRouteRuleMapOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingHTTPRouteRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadBalancingHTTPRouteRule)(nil)).Elem()
}

func (o IPLoadBalancingHTTPRouteRuleMapOutput) ToIPLoadBalancingHTTPRouteRuleMapOutput() IPLoadBalancingHTTPRouteRuleMapOutput {
	return o
}

func (o IPLoadBalancingHTTPRouteRuleMapOutput) ToIPLoadBalancingHTTPRouteRuleMapOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteRuleMapOutput {
	return o
}

func (o IPLoadBalancingHTTPRouteRuleMapOutput) MapIndex(k pulumi.StringInput) IPLoadBalancingHTTPRouteRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadBalancingHTTPRouteRule {
		return vs[0].(map[string]*IPLoadBalancingHTTPRouteRule)[vs[1].(string)]
	}).(IPLoadBalancingHTTPRouteRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingHTTPRouteRuleInput)(nil)).Elem(), &IPLoadBalancingHTTPRouteRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingHTTPRouteRuleArrayInput)(nil)).Elem(), IPLoadBalancingHTTPRouteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingHTTPRouteRuleMapInput)(nil)).Elem(), IPLoadBalancingHTTPRouteRuleMap{})
	pulumi.RegisterOutputType(IPLoadBalancingHTTPRouteRuleOutput{})
	pulumi.RegisterOutputType(IPLoadBalancingHTTPRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(IPLoadBalancingHTTPRouteRuleMapOutput{})
}
