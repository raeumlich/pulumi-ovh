// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attaches a failover IP address to a compute instance
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewCloudProjectFailoverIPAttach(ctx, "myfailoverip", &ovh.CloudProjectFailoverIPAttachArgs{
// 			Ip:          pulumi.String("XXXXXX"),
// 			RoutedTo:    pulumi.String("XXXXXX"),
// 			ServiceName: pulumi.String("XXXXXX"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type CloudProjectFailoverIPAttach struct {
	pulumi.CustomResourceState

	// The IP block
	Block pulumi.StringOutput `pulumi:"block"`
	// Ip continent
	ContinentCode pulumi.StringOutput `pulumi:"continentCode"`
	// Ip location
	GeoLoc pulumi.StringOutput `pulumi:"geoLoc"`
	// The failover ip address to attach
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Current operation progress in percent
	Progress pulumi.IntOutput `pulumi:"progress"`
	// The GUID of an instance to which the failover IP address is be attached
	RoutedTo pulumi.StringOutput `pulumi:"routedTo"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Ip status, can be `ok` or `operationPending`
	Status pulumi.StringOutput `pulumi:"status"`
	// IP sub type
	SubType pulumi.StringOutput `pulumi:"subType"`
}

// NewCloudProjectFailoverIPAttach registers a new resource with the given unique name, arguments, and options.
func NewCloudProjectFailoverIPAttach(ctx *pulumi.Context,
	name string, args *CloudProjectFailoverIPAttachArgs, opts ...pulumi.ResourceOption) (*CloudProjectFailoverIPAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource CloudProjectFailoverIPAttach
	err := ctx.RegisterResource("ovh:index/cloudProjectFailoverIPAttach:CloudProjectFailoverIPAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProjectFailoverIPAttach gets an existing CloudProjectFailoverIPAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProjectFailoverIPAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProjectFailoverIPAttachState, opts ...pulumi.ResourceOption) (*CloudProjectFailoverIPAttach, error) {
	var resource CloudProjectFailoverIPAttach
	err := ctx.ReadResource("ovh:index/cloudProjectFailoverIPAttach:CloudProjectFailoverIPAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProjectFailoverIPAttach resources.
type cloudProjectFailoverIPAttachState struct {
	// The IP block
	Block *string `pulumi:"block"`
	// Ip continent
	ContinentCode *string `pulumi:"continentCode"`
	// Ip location
	GeoLoc *string `pulumi:"geoLoc"`
	// The failover ip address to attach
	Ip *string `pulumi:"ip"`
	// Current operation progress in percent
	Progress *int `pulumi:"progress"`
	// The GUID of an instance to which the failover IP address is be attached
	RoutedTo *string `pulumi:"routedTo"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName *string `pulumi:"serviceName"`
	// Ip status, can be `ok` or `operationPending`
	Status *string `pulumi:"status"`
	// IP sub type
	SubType *string `pulumi:"subType"`
}

type CloudProjectFailoverIPAttachState struct {
	// The IP block
	Block pulumi.StringPtrInput
	// Ip continent
	ContinentCode pulumi.StringPtrInput
	// Ip location
	GeoLoc pulumi.StringPtrInput
	// The failover ip address to attach
	Ip pulumi.StringPtrInput
	// Current operation progress in percent
	Progress pulumi.IntPtrInput
	// The GUID of an instance to which the failover IP address is be attached
	RoutedTo pulumi.StringPtrInput
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringPtrInput
	// Ip status, can be `ok` or `operationPending`
	Status pulumi.StringPtrInput
	// IP sub type
	SubType pulumi.StringPtrInput
}

func (CloudProjectFailoverIPAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectFailoverIPAttachState)(nil)).Elem()
}

type cloudProjectFailoverIPAttachArgs struct {
	// The IP block
	Block *string `pulumi:"block"`
	// Ip continent
	ContinentCode *string `pulumi:"continentCode"`
	// Ip location
	GeoLoc *string `pulumi:"geoLoc"`
	// The failover ip address to attach
	Ip *string `pulumi:"ip"`
	// The GUID of an instance to which the failover IP address is be attached
	RoutedTo *string `pulumi:"routedTo"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a CloudProjectFailoverIPAttach resource.
type CloudProjectFailoverIPAttachArgs struct {
	// The IP block
	Block pulumi.StringPtrInput
	// Ip continent
	ContinentCode pulumi.StringPtrInput
	// Ip location
	GeoLoc pulumi.StringPtrInput
	// The failover ip address to attach
	Ip pulumi.StringPtrInput
	// The GUID of an instance to which the failover IP address is be attached
	RoutedTo pulumi.StringPtrInput
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringInput
}

func (CloudProjectFailoverIPAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectFailoverIPAttachArgs)(nil)).Elem()
}

type CloudProjectFailoverIPAttachInput interface {
	pulumi.Input

	ToCloudProjectFailoverIPAttachOutput() CloudProjectFailoverIPAttachOutput
	ToCloudProjectFailoverIPAttachOutputWithContext(ctx context.Context) CloudProjectFailoverIPAttachOutput
}

func (*CloudProjectFailoverIPAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectFailoverIPAttach)(nil)).Elem()
}

func (i *CloudProjectFailoverIPAttach) ToCloudProjectFailoverIPAttachOutput() CloudProjectFailoverIPAttachOutput {
	return i.ToCloudProjectFailoverIPAttachOutputWithContext(context.Background())
}

func (i *CloudProjectFailoverIPAttach) ToCloudProjectFailoverIPAttachOutputWithContext(ctx context.Context) CloudProjectFailoverIPAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectFailoverIPAttachOutput)
}

// CloudProjectFailoverIPAttachArrayInput is an input type that accepts CloudProjectFailoverIPAttachArray and CloudProjectFailoverIPAttachArrayOutput values.
// You can construct a concrete instance of `CloudProjectFailoverIPAttachArrayInput` via:
//
//          CloudProjectFailoverIPAttachArray{ CloudProjectFailoverIPAttachArgs{...} }
type CloudProjectFailoverIPAttachArrayInput interface {
	pulumi.Input

	ToCloudProjectFailoverIPAttachArrayOutput() CloudProjectFailoverIPAttachArrayOutput
	ToCloudProjectFailoverIPAttachArrayOutputWithContext(context.Context) CloudProjectFailoverIPAttachArrayOutput
}

type CloudProjectFailoverIPAttachArray []CloudProjectFailoverIPAttachInput

func (CloudProjectFailoverIPAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProjectFailoverIPAttach)(nil)).Elem()
}

func (i CloudProjectFailoverIPAttachArray) ToCloudProjectFailoverIPAttachArrayOutput() CloudProjectFailoverIPAttachArrayOutput {
	return i.ToCloudProjectFailoverIPAttachArrayOutputWithContext(context.Background())
}

func (i CloudProjectFailoverIPAttachArray) ToCloudProjectFailoverIPAttachArrayOutputWithContext(ctx context.Context) CloudProjectFailoverIPAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectFailoverIPAttachArrayOutput)
}

// CloudProjectFailoverIPAttachMapInput is an input type that accepts CloudProjectFailoverIPAttachMap and CloudProjectFailoverIPAttachMapOutput values.
// You can construct a concrete instance of `CloudProjectFailoverIPAttachMapInput` via:
//
//          CloudProjectFailoverIPAttachMap{ "key": CloudProjectFailoverIPAttachArgs{...} }
type CloudProjectFailoverIPAttachMapInput interface {
	pulumi.Input

	ToCloudProjectFailoverIPAttachMapOutput() CloudProjectFailoverIPAttachMapOutput
	ToCloudProjectFailoverIPAttachMapOutputWithContext(context.Context) CloudProjectFailoverIPAttachMapOutput
}

type CloudProjectFailoverIPAttachMap map[string]CloudProjectFailoverIPAttachInput

func (CloudProjectFailoverIPAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProjectFailoverIPAttach)(nil)).Elem()
}

func (i CloudProjectFailoverIPAttachMap) ToCloudProjectFailoverIPAttachMapOutput() CloudProjectFailoverIPAttachMapOutput {
	return i.ToCloudProjectFailoverIPAttachMapOutputWithContext(context.Background())
}

func (i CloudProjectFailoverIPAttachMap) ToCloudProjectFailoverIPAttachMapOutputWithContext(ctx context.Context) CloudProjectFailoverIPAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectFailoverIPAttachMapOutput)
}

type CloudProjectFailoverIPAttachOutput struct{ *pulumi.OutputState }

func (CloudProjectFailoverIPAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectFailoverIPAttach)(nil)).Elem()
}

func (o CloudProjectFailoverIPAttachOutput) ToCloudProjectFailoverIPAttachOutput() CloudProjectFailoverIPAttachOutput {
	return o
}

func (o CloudProjectFailoverIPAttachOutput) ToCloudProjectFailoverIPAttachOutputWithContext(ctx context.Context) CloudProjectFailoverIPAttachOutput {
	return o
}

// The IP block
func (o CloudProjectFailoverIPAttachOutput) Block() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectFailoverIPAttach) pulumi.StringOutput { return v.Block }).(pulumi.StringOutput)
}

// Ip continent
func (o CloudProjectFailoverIPAttachOutput) ContinentCode() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectFailoverIPAttach) pulumi.StringOutput { return v.ContinentCode }).(pulumi.StringOutput)
}

// Ip location
func (o CloudProjectFailoverIPAttachOutput) GeoLoc() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectFailoverIPAttach) pulumi.StringOutput { return v.GeoLoc }).(pulumi.StringOutput)
}

// The failover ip address to attach
func (o CloudProjectFailoverIPAttachOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectFailoverIPAttach) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Current operation progress in percent
func (o CloudProjectFailoverIPAttachOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudProjectFailoverIPAttach) pulumi.IntOutput { return v.Progress }).(pulumi.IntOutput)
}

// The GUID of an instance to which the failover IP address is be attached
func (o CloudProjectFailoverIPAttachOutput) RoutedTo() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectFailoverIPAttach) pulumi.StringOutput { return v.RoutedTo }).(pulumi.StringOutput)
}

// The id of the public cloud project. If omitted,
// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
func (o CloudProjectFailoverIPAttachOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectFailoverIPAttach) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Ip status, can be `ok` or `operationPending`
func (o CloudProjectFailoverIPAttachOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectFailoverIPAttach) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// IP sub type
func (o CloudProjectFailoverIPAttachOutput) SubType() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectFailoverIPAttach) pulumi.StringOutput { return v.SubType }).(pulumi.StringOutput)
}

type CloudProjectFailoverIPAttachArrayOutput struct{ *pulumi.OutputState }

func (CloudProjectFailoverIPAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProjectFailoverIPAttach)(nil)).Elem()
}

func (o CloudProjectFailoverIPAttachArrayOutput) ToCloudProjectFailoverIPAttachArrayOutput() CloudProjectFailoverIPAttachArrayOutput {
	return o
}

func (o CloudProjectFailoverIPAttachArrayOutput) ToCloudProjectFailoverIPAttachArrayOutputWithContext(ctx context.Context) CloudProjectFailoverIPAttachArrayOutput {
	return o
}

func (o CloudProjectFailoverIPAttachArrayOutput) Index(i pulumi.IntInput) CloudProjectFailoverIPAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudProjectFailoverIPAttach {
		return vs[0].([]*CloudProjectFailoverIPAttach)[vs[1].(int)]
	}).(CloudProjectFailoverIPAttachOutput)
}

type CloudProjectFailoverIPAttachMapOutput struct{ *pulumi.OutputState }

func (CloudProjectFailoverIPAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProjectFailoverIPAttach)(nil)).Elem()
}

func (o CloudProjectFailoverIPAttachMapOutput) ToCloudProjectFailoverIPAttachMapOutput() CloudProjectFailoverIPAttachMapOutput {
	return o
}

func (o CloudProjectFailoverIPAttachMapOutput) ToCloudProjectFailoverIPAttachMapOutputWithContext(ctx context.Context) CloudProjectFailoverIPAttachMapOutput {
	return o
}

func (o CloudProjectFailoverIPAttachMapOutput) MapIndex(k pulumi.StringInput) CloudProjectFailoverIPAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudProjectFailoverIPAttach {
		return vs[0].(map[string]*CloudProjectFailoverIPAttach)[vs[1].(string)]
	}).(CloudProjectFailoverIPAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectFailoverIPAttachInput)(nil)).Elem(), &CloudProjectFailoverIPAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectFailoverIPAttachArrayInput)(nil)).Elem(), CloudProjectFailoverIPAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectFailoverIPAttachMapInput)(nil)).Elem(), CloudProjectFailoverIPAttachMap{})
	pulumi.RegisterOutputType(CloudProjectFailoverIPAttachOutput{})
	pulumi.RegisterOutputType(CloudProjectFailoverIPAttachArrayOutput{})
	pulumi.RegisterOutputType(CloudProjectFailoverIPAttachMapOutput{})
}
