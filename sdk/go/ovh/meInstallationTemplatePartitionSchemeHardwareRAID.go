// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create a hardware raid group in the partition scheme of a custom installation template available for dedicated servers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		mytemplate, err := ovh.NewMeInstallationTemplate(ctx, "mytemplate", &ovh.MeInstallationTemplateArgs{
// 			BaseTemplateName: pulumi.String("centos7_64"),
// 			TemplateName:     pulumi.String("mytemplate"),
// 			DefaultLanguage:  pulumi.String("fr"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		scheme, err := ovh.NewMeInstallationTemplatePartitionScheme(ctx, "scheme", &ovh.MeInstallationTemplatePartitionSchemeArgs{
// 			TemplateName: mytemplate.TemplateName,
// 			Priority:     pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewMeInstallationTemplatePartitionSchemeHardwareRAID(ctx, "group1", &ovh.MeInstallationTemplatePartitionSchemeHardwareRAIDArgs{
// 			TemplateName: scheme.TemplateName,
// 			SchemeName:   scheme.Name,
// 			Disks: pulumi.StringArray{
// 				pulumi.String("[c1:d1,c1:d2,c1:d3]"),
// 				pulumi.String("[c1:d10,c1:d20,c1:d30]"),
// 			},
// 			Mode: pulumi.String("raid50"),
// 			Step: pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Use the fake id format to import the resource `template_name/scheme_name/name`.
type MeInstallationTemplatePartitionSchemeHardwareRAID struct {
	pulumi.CustomResourceState

	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks pulumi.StringArrayOutput `pulumi:"disks"`
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Hardware RAID name
	Name pulumi.StringOutput `pulumi:"name"`
	// name of this partitioning scheme
	SchemeName pulumi.StringOutput `pulumi:"schemeName"`
	// Specifies the creation order of the hardware RAID
	Step pulumi.IntOutput `pulumi:"step"`
	// Template name
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
}

// NewMeInstallationTemplatePartitionSchemeHardwareRAID registers a new resource with the given unique name, arguments, and options.
func NewMeInstallationTemplatePartitionSchemeHardwareRAID(ctx *pulumi.Context,
	name string, args *MeInstallationTemplatePartitionSchemeHardwareRAIDArgs, opts ...pulumi.ResourceOption) (*MeInstallationTemplatePartitionSchemeHardwareRAID, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Disks == nil {
		return nil, errors.New("invalid value for required argument 'Disks'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.SchemeName == nil {
		return nil, errors.New("invalid value for required argument 'SchemeName'")
	}
	if args.Step == nil {
		return nil, errors.New("invalid value for required argument 'Step'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	var resource MeInstallationTemplatePartitionSchemeHardwareRAID
	err := ctx.RegisterResource("ovh:index/meInstallationTemplatePartitionSchemeHardwareRAID:MeInstallationTemplatePartitionSchemeHardwareRAID", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMeInstallationTemplatePartitionSchemeHardwareRAID gets an existing MeInstallationTemplatePartitionSchemeHardwareRAID resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMeInstallationTemplatePartitionSchemeHardwareRAID(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeInstallationTemplatePartitionSchemeHardwareRAIDState, opts ...pulumi.ResourceOption) (*MeInstallationTemplatePartitionSchemeHardwareRAID, error) {
	var resource MeInstallationTemplatePartitionSchemeHardwareRAID
	err := ctx.ReadResource("ovh:index/meInstallationTemplatePartitionSchemeHardwareRAID:MeInstallationTemplatePartitionSchemeHardwareRAID", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MeInstallationTemplatePartitionSchemeHardwareRAID resources.
type meInstallationTemplatePartitionSchemeHardwareRAIDState struct {
	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks []string `pulumi:"disks"`
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode *string `pulumi:"mode"`
	// Hardware RAID name
	Name *string `pulumi:"name"`
	// name of this partitioning scheme
	SchemeName *string `pulumi:"schemeName"`
	// Specifies the creation order of the hardware RAID
	Step *int `pulumi:"step"`
	// Template name
	TemplateName *string `pulumi:"templateName"`
}

type MeInstallationTemplatePartitionSchemeHardwareRAIDState struct {
	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks pulumi.StringArrayInput
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode pulumi.StringPtrInput
	// Hardware RAID name
	Name pulumi.StringPtrInput
	// name of this partitioning scheme
	SchemeName pulumi.StringPtrInput
	// Specifies the creation order of the hardware RAID
	Step pulumi.IntPtrInput
	// Template name
	TemplateName pulumi.StringPtrInput
}

func (MeInstallationTemplatePartitionSchemeHardwareRAIDState) ElementType() reflect.Type {
	return reflect.TypeOf((*meInstallationTemplatePartitionSchemeHardwareRAIDState)(nil)).Elem()
}

type meInstallationTemplatePartitionSchemeHardwareRAIDArgs struct {
	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks []string `pulumi:"disks"`
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode string `pulumi:"mode"`
	// Hardware RAID name
	Name *string `pulumi:"name"`
	// name of this partitioning scheme
	SchemeName string `pulumi:"schemeName"`
	// Specifies the creation order of the hardware RAID
	Step int `pulumi:"step"`
	// Template name
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a MeInstallationTemplatePartitionSchemeHardwareRAID resource.
type MeInstallationTemplatePartitionSchemeHardwareRAIDArgs struct {
	// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
	Disks pulumi.StringArrayInput
	// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
	Mode pulumi.StringInput
	// Hardware RAID name
	Name pulumi.StringPtrInput
	// name of this partitioning scheme
	SchemeName pulumi.StringInput
	// Specifies the creation order of the hardware RAID
	Step pulumi.IntInput
	// Template name
	TemplateName pulumi.StringInput
}

func (MeInstallationTemplatePartitionSchemeHardwareRAIDArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*meInstallationTemplatePartitionSchemeHardwareRAIDArgs)(nil)).Elem()
}

type MeInstallationTemplatePartitionSchemeHardwareRAIDInput interface {
	pulumi.Input

	ToMeInstallationTemplatePartitionSchemeHardwareRAIDOutput() MeInstallationTemplatePartitionSchemeHardwareRAIDOutput
	ToMeInstallationTemplatePartitionSchemeHardwareRAIDOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRAIDOutput
}

func (*MeInstallationTemplatePartitionSchemeHardwareRAID) ElementType() reflect.Type {
	return reflect.TypeOf((**MeInstallationTemplatePartitionSchemeHardwareRAID)(nil)).Elem()
}

func (i *MeInstallationTemplatePartitionSchemeHardwareRAID) ToMeInstallationTemplatePartitionSchemeHardwareRAIDOutput() MeInstallationTemplatePartitionSchemeHardwareRAIDOutput {
	return i.ToMeInstallationTemplatePartitionSchemeHardwareRAIDOutputWithContext(context.Background())
}

func (i *MeInstallationTemplatePartitionSchemeHardwareRAID) ToMeInstallationTemplatePartitionSchemeHardwareRAIDOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRAIDOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeInstallationTemplatePartitionSchemeHardwareRAIDOutput)
}

// MeInstallationTemplatePartitionSchemeHardwareRAIDArrayInput is an input type that accepts MeInstallationTemplatePartitionSchemeHardwareRAIDArray and MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput values.
// You can construct a concrete instance of `MeInstallationTemplatePartitionSchemeHardwareRAIDArrayInput` via:
//
//          MeInstallationTemplatePartitionSchemeHardwareRAIDArray{ MeInstallationTemplatePartitionSchemeHardwareRAIDArgs{...} }
type MeInstallationTemplatePartitionSchemeHardwareRAIDArrayInput interface {
	pulumi.Input

	ToMeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput() MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput
	ToMeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutputWithContext(context.Context) MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput
}

type MeInstallationTemplatePartitionSchemeHardwareRAIDArray []MeInstallationTemplatePartitionSchemeHardwareRAIDInput

func (MeInstallationTemplatePartitionSchemeHardwareRAIDArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MeInstallationTemplatePartitionSchemeHardwareRAID)(nil)).Elem()
}

func (i MeInstallationTemplatePartitionSchemeHardwareRAIDArray) ToMeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput() MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput {
	return i.ToMeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutputWithContext(context.Background())
}

func (i MeInstallationTemplatePartitionSchemeHardwareRAIDArray) ToMeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput)
}

// MeInstallationTemplatePartitionSchemeHardwareRAIDMapInput is an input type that accepts MeInstallationTemplatePartitionSchemeHardwareRAIDMap and MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput values.
// You can construct a concrete instance of `MeInstallationTemplatePartitionSchemeHardwareRAIDMapInput` via:
//
//          MeInstallationTemplatePartitionSchemeHardwareRAIDMap{ "key": MeInstallationTemplatePartitionSchemeHardwareRAIDArgs{...} }
type MeInstallationTemplatePartitionSchemeHardwareRAIDMapInput interface {
	pulumi.Input

	ToMeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput() MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput
	ToMeInstallationTemplatePartitionSchemeHardwareRAIDMapOutputWithContext(context.Context) MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput
}

type MeInstallationTemplatePartitionSchemeHardwareRAIDMap map[string]MeInstallationTemplatePartitionSchemeHardwareRAIDInput

func (MeInstallationTemplatePartitionSchemeHardwareRAIDMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MeInstallationTemplatePartitionSchemeHardwareRAID)(nil)).Elem()
}

func (i MeInstallationTemplatePartitionSchemeHardwareRAIDMap) ToMeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput() MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput {
	return i.ToMeInstallationTemplatePartitionSchemeHardwareRAIDMapOutputWithContext(context.Background())
}

func (i MeInstallationTemplatePartitionSchemeHardwareRAIDMap) ToMeInstallationTemplatePartitionSchemeHardwareRAIDMapOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput)
}

type MeInstallationTemplatePartitionSchemeHardwareRAIDOutput struct{ *pulumi.OutputState }

func (MeInstallationTemplatePartitionSchemeHardwareRAIDOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeInstallationTemplatePartitionSchemeHardwareRAID)(nil)).Elem()
}

func (o MeInstallationTemplatePartitionSchemeHardwareRAIDOutput) ToMeInstallationTemplatePartitionSchemeHardwareRAIDOutput() MeInstallationTemplatePartitionSchemeHardwareRAIDOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRAIDOutput) ToMeInstallationTemplatePartitionSchemeHardwareRAIDOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRAIDOutput {
	return o
}

// Disk List. Syntax is cX:dY for disks and [cX:dY,cX:dY] for groups. With X and Y resp. the controller id and the disk id
func (o MeInstallationTemplatePartitionSchemeHardwareRAIDOutput) Disks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRAID) pulumi.StringArrayOutput { return v.Disks }).(pulumi.StringArrayOutput)
}

// RAID mode (raid0, raid1, raid10, raid5, raid50, raid6, raid60)
func (o MeInstallationTemplatePartitionSchemeHardwareRAIDOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRAID) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Hardware RAID name
func (o MeInstallationTemplatePartitionSchemeHardwareRAIDOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRAID) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// name of this partitioning scheme
func (o MeInstallationTemplatePartitionSchemeHardwareRAIDOutput) SchemeName() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRAID) pulumi.StringOutput { return v.SchemeName }).(pulumi.StringOutput)
}

// Specifies the creation order of the hardware RAID
func (o MeInstallationTemplatePartitionSchemeHardwareRAIDOutput) Step() pulumi.IntOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRAID) pulumi.IntOutput { return v.Step }).(pulumi.IntOutput)
}

// Template name
func (o MeInstallationTemplatePartitionSchemeHardwareRAIDOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *MeInstallationTemplatePartitionSchemeHardwareRAID) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

type MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput struct{ *pulumi.OutputState }

func (MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MeInstallationTemplatePartitionSchemeHardwareRAID)(nil)).Elem()
}

func (o MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput) ToMeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput() MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput) ToMeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput) Index(i pulumi.IntInput) MeInstallationTemplatePartitionSchemeHardwareRAIDOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MeInstallationTemplatePartitionSchemeHardwareRAID {
		return vs[0].([]*MeInstallationTemplatePartitionSchemeHardwareRAID)[vs[1].(int)]
	}).(MeInstallationTemplatePartitionSchemeHardwareRAIDOutput)
}

type MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput struct{ *pulumi.OutputState }

func (MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MeInstallationTemplatePartitionSchemeHardwareRAID)(nil)).Elem()
}

func (o MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput) ToMeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput() MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput) ToMeInstallationTemplatePartitionSchemeHardwareRAIDMapOutputWithContext(ctx context.Context) MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput {
	return o
}

func (o MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput) MapIndex(k pulumi.StringInput) MeInstallationTemplatePartitionSchemeHardwareRAIDOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MeInstallationTemplatePartitionSchemeHardwareRAID {
		return vs[0].(map[string]*MeInstallationTemplatePartitionSchemeHardwareRAID)[vs[1].(string)]
	}).(MeInstallationTemplatePartitionSchemeHardwareRAIDOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MeInstallationTemplatePartitionSchemeHardwareRAIDInput)(nil)).Elem(), &MeInstallationTemplatePartitionSchemeHardwareRAID{})
	pulumi.RegisterInputType(reflect.TypeOf((*MeInstallationTemplatePartitionSchemeHardwareRAIDArrayInput)(nil)).Elem(), MeInstallationTemplatePartitionSchemeHardwareRAIDArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MeInstallationTemplatePartitionSchemeHardwareRAIDMapInput)(nil)).Elem(), MeInstallationTemplatePartitionSchemeHardwareRAIDMap{})
	pulumi.RegisterOutputType(MeInstallationTemplatePartitionSchemeHardwareRAIDOutput{})
	pulumi.RegisterOutputType(MeInstallationTemplatePartitionSchemeHardwareRAIDArrayOutput{})
	pulumi.RegisterOutputType(MeInstallationTemplatePartitionSchemeHardwareRAIDMapOutput{})
}
