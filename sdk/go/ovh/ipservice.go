// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Orders an ip service.
//
// ## Important
//
// This resource orders an OVH product for a long period of time and may generate heavy costs !
// Use with caution.
//
// __NOTE__ 1: the "default-payment-mean" will scan your registered bank accounts, credit card and paypal payment means to find your default payment mean.
//
// __NOTE__ 2: this resource is in beta state. Use with caution.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		mycart, err := ovh.GetOrderCart(ctx, &GetOrderCartArgs{
// 			OvhSubsidiary: "fr",
// 			Description:   pulumi.StringRef("order ip block"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ipblockProductCartProductPlan, err := ovh.GetProductCartProductPlan(ctx, &GetProductCartProductPlanArgs{
// 			CartId:        mycart.Id,
// 			PriceCapacity: "renew",
// 			Product:       "ip",
// 			PlanCode:      "ip-v4-s30-ripe",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewIPService(ctx, "ipblockIPService", &ovh.IPServiceArgs{
// 			OvhSubsidiary: pulumi.String(mycart.OvhSubsidiary),
// 			PaymentMean:   pulumi.String("ovh-account"),
// 			Description:   pulumi.String("my ip block"),
// 			Plan: &IPServicePlanArgs{
// 				Duration:    pulumi.String(ipblockProductCartProductPlan.SelectedPrices[0].Duration),
// 				PlanCode:    pulumi.String(ipblockProductCartProductPlan.PlanCode),
// 				PricingMode: pulumi.String(ipblockProductCartProductPlan.SelectedPrices[0].PricingMode),
// 				Configurations: IPServicePlanConfigurationArray{
// 					&IPServicePlanConfigurationArgs{
// 						Label: pulumi.String("country"),
// 						Value: pulumi.String("FR"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPService struct {
	pulumi.CustomResourceState

	// can be terminated
	CanBeTerminated pulumi.BoolOutput `pulumi:"canBeTerminated"`
	// country
	Country pulumi.StringOutput `pulumi:"country"`
	// Custom description on your ip.
	Description pulumi.StringOutput `pulumi:"description"`
	// ip block
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Details about an Order
	Orders IPServiceOrderArrayOutput `pulumi:"orders"`
	// IP block organisation Id
	OrganisationId pulumi.StringOutput `pulumi:"organisationId"`
	// Ovh Subsidiary
	OvhSubsidiary pulumi.StringOutput `pulumi:"ovhSubsidiary"`
	// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean pulumi.StringOutput `pulumi:"paymentMean"`
	// Product Plan to order
	Plan IPServicePlanOutput `pulumi:"plan"`
	// Product Plan to order
	PlanOptions IPServicePlanOptionArrayOutput `pulumi:"planOptions"`
	// Routage information
	RoutedTos IPServiceRoutedToArrayOutput `pulumi:"routedTos"`
	// Service where ip is routed to
	// * `serviceName`: service name
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Possible values for ip type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIPService registers a new resource with the given unique name, arguments, and options.
func NewIPService(ctx *pulumi.Context,
	name string, args *IPServiceArgs, opts ...pulumi.ResourceOption) (*IPService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OvhSubsidiary == nil {
		return nil, errors.New("invalid value for required argument 'OvhSubsidiary'")
	}
	if args.PaymentMean == nil {
		return nil, errors.New("invalid value for required argument 'PaymentMean'")
	}
	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	var resource IPService
	err := ctx.RegisterResource("ovh:index/iPService:IPService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPService gets an existing IPService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPServiceState, opts ...pulumi.ResourceOption) (*IPService, error) {
	var resource IPService
	err := ctx.ReadResource("ovh:index/iPService:IPService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPService resources.
type ipserviceState struct {
	// can be terminated
	CanBeTerminated *bool `pulumi:"canBeTerminated"`
	// country
	Country *string `pulumi:"country"`
	// Custom description on your ip.
	Description *string `pulumi:"description"`
	// ip block
	Ip *string `pulumi:"ip"`
	// Details about an Order
	Orders []IPServiceOrder `pulumi:"orders"`
	// IP block organisation Id
	OrganisationId *string `pulumi:"organisationId"`
	// Ovh Subsidiary
	OvhSubsidiary *string `pulumi:"ovhSubsidiary"`
	// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean *string `pulumi:"paymentMean"`
	// Product Plan to order
	Plan *IPServicePlan `pulumi:"plan"`
	// Product Plan to order
	PlanOptions []IPServicePlanOption `pulumi:"planOptions"`
	// Routage information
	RoutedTos []IPServiceRoutedTo `pulumi:"routedTos"`
	// Service where ip is routed to
	// * `serviceName`: service name
	ServiceName *string `pulumi:"serviceName"`
	// Possible values for ip type
	Type *string `pulumi:"type"`
}

type IPServiceState struct {
	// can be terminated
	CanBeTerminated pulumi.BoolPtrInput
	// country
	Country pulumi.StringPtrInput
	// Custom description on your ip.
	Description pulumi.StringPtrInput
	// ip block
	Ip pulumi.StringPtrInput
	// Details about an Order
	Orders IPServiceOrderArrayInput
	// IP block organisation Id
	OrganisationId pulumi.StringPtrInput
	// Ovh Subsidiary
	OvhSubsidiary pulumi.StringPtrInput
	// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean pulumi.StringPtrInput
	// Product Plan to order
	Plan IPServicePlanPtrInput
	// Product Plan to order
	PlanOptions IPServicePlanOptionArrayInput
	// Routage information
	RoutedTos IPServiceRoutedToArrayInput
	// Service where ip is routed to
	// * `serviceName`: service name
	ServiceName pulumi.StringPtrInput
	// Possible values for ip type
	Type pulumi.StringPtrInput
}

func (IPServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipserviceState)(nil)).Elem()
}

type ipserviceArgs struct {
	// Custom description on your ip.
	Description *string `pulumi:"description"`
	// Ovh Subsidiary
	OvhSubsidiary string `pulumi:"ovhSubsidiary"`
	// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean string `pulumi:"paymentMean"`
	// Product Plan to order
	Plan IPServicePlan `pulumi:"plan"`
	// Product Plan to order
	PlanOptions []IPServicePlanOption `pulumi:"planOptions"`
}

// The set of arguments for constructing a IPService resource.
type IPServiceArgs struct {
	// Custom description on your ip.
	Description pulumi.StringPtrInput
	// Ovh Subsidiary
	OvhSubsidiary pulumi.StringInput
	// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean pulumi.StringInput
	// Product Plan to order
	Plan IPServicePlanInput
	// Product Plan to order
	PlanOptions IPServicePlanOptionArrayInput
}

func (IPServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipserviceArgs)(nil)).Elem()
}

type IPServiceInput interface {
	pulumi.Input

	ToIPServiceOutput() IPServiceOutput
	ToIPServiceOutputWithContext(ctx context.Context) IPServiceOutput
}

func (*IPService) ElementType() reflect.Type {
	return reflect.TypeOf((**IPService)(nil)).Elem()
}

func (i *IPService) ToIPServiceOutput() IPServiceOutput {
	return i.ToIPServiceOutputWithContext(context.Background())
}

func (i *IPService) ToIPServiceOutputWithContext(ctx context.Context) IPServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPServiceOutput)
}

// IPServiceArrayInput is an input type that accepts IPServiceArray and IPServiceArrayOutput values.
// You can construct a concrete instance of `IPServiceArrayInput` via:
//
//          IPServiceArray{ IPServiceArgs{...} }
type IPServiceArrayInput interface {
	pulumi.Input

	ToIPServiceArrayOutput() IPServiceArrayOutput
	ToIPServiceArrayOutputWithContext(context.Context) IPServiceArrayOutput
}

type IPServiceArray []IPServiceInput

func (IPServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPService)(nil)).Elem()
}

func (i IPServiceArray) ToIPServiceArrayOutput() IPServiceArrayOutput {
	return i.ToIPServiceArrayOutputWithContext(context.Background())
}

func (i IPServiceArray) ToIPServiceArrayOutputWithContext(ctx context.Context) IPServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPServiceArrayOutput)
}

// IPServiceMapInput is an input type that accepts IPServiceMap and IPServiceMapOutput values.
// You can construct a concrete instance of `IPServiceMapInput` via:
//
//          IPServiceMap{ "key": IPServiceArgs{...} }
type IPServiceMapInput interface {
	pulumi.Input

	ToIPServiceMapOutput() IPServiceMapOutput
	ToIPServiceMapOutputWithContext(context.Context) IPServiceMapOutput
}

type IPServiceMap map[string]IPServiceInput

func (IPServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPService)(nil)).Elem()
}

func (i IPServiceMap) ToIPServiceMapOutput() IPServiceMapOutput {
	return i.ToIPServiceMapOutputWithContext(context.Background())
}

func (i IPServiceMap) ToIPServiceMapOutputWithContext(ctx context.Context) IPServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPServiceMapOutput)
}

type IPServiceOutput struct{ *pulumi.OutputState }

func (IPServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPService)(nil)).Elem()
}

func (o IPServiceOutput) ToIPServiceOutput() IPServiceOutput {
	return o
}

func (o IPServiceOutput) ToIPServiceOutputWithContext(ctx context.Context) IPServiceOutput {
	return o
}

// can be terminated
func (o IPServiceOutput) CanBeTerminated() pulumi.BoolOutput {
	return o.ApplyT(func(v *IPService) pulumi.BoolOutput { return v.CanBeTerminated }).(pulumi.BoolOutput)
}

// country
func (o IPServiceOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v *IPService) pulumi.StringOutput { return v.Country }).(pulumi.StringOutput)
}

// Custom description on your ip.
func (o IPServiceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *IPService) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// ip block
func (o IPServiceOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *IPService) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Details about an Order
func (o IPServiceOutput) Orders() IPServiceOrderArrayOutput {
	return o.ApplyT(func(v *IPService) IPServiceOrderArrayOutput { return v.Orders }).(IPServiceOrderArrayOutput)
}

// IP block organisation Id
func (o IPServiceOutput) OrganisationId() pulumi.StringOutput {
	return o.ApplyT(func(v *IPService) pulumi.StringOutput { return v.OrganisationId }).(pulumi.StringOutput)
}

// Ovh Subsidiary
func (o IPServiceOutput) OvhSubsidiary() pulumi.StringOutput {
	return o.ApplyT(func(v *IPService) pulumi.StringOutput { return v.OvhSubsidiary }).(pulumi.StringOutput)
}

// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
func (o IPServiceOutput) PaymentMean() pulumi.StringOutput {
	return o.ApplyT(func(v *IPService) pulumi.StringOutput { return v.PaymentMean }).(pulumi.StringOutput)
}

// Product Plan to order
func (o IPServiceOutput) Plan() IPServicePlanOutput {
	return o.ApplyT(func(v *IPService) IPServicePlanOutput { return v.Plan }).(IPServicePlanOutput)
}

// Product Plan to order
func (o IPServiceOutput) PlanOptions() IPServicePlanOptionArrayOutput {
	return o.ApplyT(func(v *IPService) IPServicePlanOptionArrayOutput { return v.PlanOptions }).(IPServicePlanOptionArrayOutput)
}

// Routage information
func (o IPServiceOutput) RoutedTos() IPServiceRoutedToArrayOutput {
	return o.ApplyT(func(v *IPService) IPServiceRoutedToArrayOutput { return v.RoutedTos }).(IPServiceRoutedToArrayOutput)
}

// Service where ip is routed to
// * `serviceName`: service name
func (o IPServiceOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IPService) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Possible values for ip type
func (o IPServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IPService) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type IPServiceArrayOutput struct{ *pulumi.OutputState }

func (IPServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPService)(nil)).Elem()
}

func (o IPServiceArrayOutput) ToIPServiceArrayOutput() IPServiceArrayOutput {
	return o
}

func (o IPServiceArrayOutput) ToIPServiceArrayOutputWithContext(ctx context.Context) IPServiceArrayOutput {
	return o
}

func (o IPServiceArrayOutput) Index(i pulumi.IntInput) IPServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPService {
		return vs[0].([]*IPService)[vs[1].(int)]
	}).(IPServiceOutput)
}

type IPServiceMapOutput struct{ *pulumi.OutputState }

func (IPServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPService)(nil)).Elem()
}

func (o IPServiceMapOutput) ToIPServiceMapOutput() IPServiceMapOutput {
	return o
}

func (o IPServiceMapOutput) ToIPServiceMapOutputWithContext(ctx context.Context) IPServiceMapOutput {
	return o
}

func (o IPServiceMapOutput) MapIndex(k pulumi.StringInput) IPServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPService {
		return vs[0].(map[string]*IPService)[vs[1].(string)]
	}).(IPServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPServiceInput)(nil)).Elem(), &IPService{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPServiceArrayInput)(nil)).Elem(), IPServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPServiceMapInput)(nil)).Elem(), IPServiceMap{})
	pulumi.RegisterOutputType(IPServiceOutput{})
	pulumi.RegisterOutputType(IPServiceArrayOutput{})
	pulumi.RegisterOutputType(IPServiceMapOutput{})
}
