// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Orders a vrack.
//
// ## Important
//
// This resource is in beta state. Use with caution.
//
// __NOTE__ : Currently, the OVH api doesn't support Vrack termination. You have to open a support ticket to ask for vrack termination. Otherwise, you may hit vrack quota issues.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		mycart, err := ovh.GetOrderCart(ctx, &GetOrderCartArgs{
// 			OvhSubsidiary: "fr",
// 			Description:   pulumi.StringRef("my vrack order cart"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		vrackProductCartProductPlan, err := ovh.GetProductCartProductPlan(ctx, &GetProductCartProductPlanArgs{
// 			CartId:        mycart.Id,
// 			PriceCapacity: "renew",
// 			Product:       "vrack",
// 			PlanCode:      "vrack",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewVRack(ctx, "vrackVRack", &ovh.VRackArgs{
// 			OvhSubsidiary: pulumi.String(mycart.OvhSubsidiary),
// 			PaymentMean:   pulumi.String("fidelity"),
// 			Description:   pulumi.String("my vrack"),
// 			Plan: &VRackPlanArgs{
// 				Duration:    pulumi.String(vrackProductCartProductPlan.SelectedPrices[0].Duration),
// 				PlanCode:    pulumi.String(vrackProductCartProductPlan.PlanCode),
// 				PricingMode: pulumi.String(vrackProductCartProductPlan.SelectedPrices[0].PricingMode),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VRack struct {
	pulumi.CustomResourceState

	// yourvrackdescription
	Description pulumi.StringOutput `pulumi:"description"`
	// yourvrackname
	Name pulumi.StringOutput `pulumi:"name"`
	// Details about an Order
	Orders VRackOrderArrayOutput `pulumi:"orders"`
	// Ovh Subsidiary
	OvhSubsidiary pulumi.StringOutput `pulumi:"ovhSubsidiary"`
	// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean pulumi.StringOutput `pulumi:"paymentMean"`
	// Product Plan to order
	Plan VRackPlanOutput `pulumi:"plan"`
	// Product Plan to order
	PlanOptions VRackPlanOptionArrayOutput `pulumi:"planOptions"`
	// The internal name of your vrack
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVRack registers a new resource with the given unique name, arguments, and options.
func NewVRack(ctx *pulumi.Context,
	name string, args *VRackArgs, opts ...pulumi.ResourceOption) (*VRack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OvhSubsidiary == nil {
		return nil, errors.New("invalid value for required argument 'OvhSubsidiary'")
	}
	if args.PaymentMean == nil {
		return nil, errors.New("invalid value for required argument 'PaymentMean'")
	}
	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	var resource VRack
	err := ctx.RegisterResource("ovh:index/vRack:VRack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVRack gets an existing VRack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVRack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VRackState, opts ...pulumi.ResourceOption) (*VRack, error) {
	var resource VRack
	err := ctx.ReadResource("ovh:index/vRack:VRack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VRack resources.
type vrackState struct {
	// yourvrackdescription
	Description *string `pulumi:"description"`
	// yourvrackname
	Name *string `pulumi:"name"`
	// Details about an Order
	Orders []VRackOrder `pulumi:"orders"`
	// Ovh Subsidiary
	OvhSubsidiary *string `pulumi:"ovhSubsidiary"`
	// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean *string `pulumi:"paymentMean"`
	// Product Plan to order
	Plan *VRackPlan `pulumi:"plan"`
	// Product Plan to order
	PlanOptions []VRackPlanOption `pulumi:"planOptions"`
	// The internal name of your vrack
	ServiceName *string `pulumi:"serviceName"`
}

type VRackState struct {
	// yourvrackdescription
	Description pulumi.StringPtrInput
	// yourvrackname
	Name pulumi.StringPtrInput
	// Details about an Order
	Orders VRackOrderArrayInput
	// Ovh Subsidiary
	OvhSubsidiary pulumi.StringPtrInput
	// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean pulumi.StringPtrInput
	// Product Plan to order
	Plan VRackPlanPtrInput
	// Product Plan to order
	PlanOptions VRackPlanOptionArrayInput
	// The internal name of your vrack
	ServiceName pulumi.StringPtrInput
}

func (VRackState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackState)(nil)).Elem()
}

type vrackArgs struct {
	// yourvrackdescription
	Description *string `pulumi:"description"`
	// yourvrackname
	Name *string `pulumi:"name"`
	// Ovh Subsidiary
	OvhSubsidiary string `pulumi:"ovhSubsidiary"`
	// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean string `pulumi:"paymentMean"`
	// Product Plan to order
	Plan VRackPlan `pulumi:"plan"`
	// Product Plan to order
	PlanOptions []VRackPlanOption `pulumi:"planOptions"`
}

// The set of arguments for constructing a VRack resource.
type VRackArgs struct {
	// yourvrackdescription
	Description pulumi.StringPtrInput
	// yourvrackname
	Name pulumi.StringPtrInput
	// Ovh Subsidiary
	OvhSubsidiary pulumi.StringInput
	// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
	PaymentMean pulumi.StringInput
	// Product Plan to order
	Plan VRackPlanInput
	// Product Plan to order
	PlanOptions VRackPlanOptionArrayInput
}

func (VRackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackArgs)(nil)).Elem()
}

type VRackInput interface {
	pulumi.Input

	ToVRackOutput() VRackOutput
	ToVRackOutputWithContext(ctx context.Context) VRackOutput
}

func (*VRack) ElementType() reflect.Type {
	return reflect.TypeOf((**VRack)(nil)).Elem()
}

func (i *VRack) ToVRackOutput() VRackOutput {
	return i.ToVRackOutputWithContext(context.Background())
}

func (i *VRack) ToVRackOutputWithContext(ctx context.Context) VRackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackOutput)
}

// VRackArrayInput is an input type that accepts VRackArray and VRackArrayOutput values.
// You can construct a concrete instance of `VRackArrayInput` via:
//
//          VRackArray{ VRackArgs{...} }
type VRackArrayInput interface {
	pulumi.Input

	ToVRackArrayOutput() VRackArrayOutput
	ToVRackArrayOutputWithContext(context.Context) VRackArrayOutput
}

type VRackArray []VRackInput

func (VRackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRack)(nil)).Elem()
}

func (i VRackArray) ToVRackArrayOutput() VRackArrayOutput {
	return i.ToVRackArrayOutputWithContext(context.Background())
}

func (i VRackArray) ToVRackArrayOutputWithContext(ctx context.Context) VRackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackArrayOutput)
}

// VRackMapInput is an input type that accepts VRackMap and VRackMapOutput values.
// You can construct a concrete instance of `VRackMapInput` via:
//
//          VRackMap{ "key": VRackArgs{...} }
type VRackMapInput interface {
	pulumi.Input

	ToVRackMapOutput() VRackMapOutput
	ToVRackMapOutputWithContext(context.Context) VRackMapOutput
}

type VRackMap map[string]VRackInput

func (VRackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRack)(nil)).Elem()
}

func (i VRackMap) ToVRackMapOutput() VRackMapOutput {
	return i.ToVRackMapOutputWithContext(context.Background())
}

func (i VRackMap) ToVRackMapOutputWithContext(ctx context.Context) VRackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackMapOutput)
}

type VRackOutput struct{ *pulumi.OutputState }

func (VRackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VRack)(nil)).Elem()
}

func (o VRackOutput) ToVRackOutput() VRackOutput {
	return o
}

func (o VRackOutput) ToVRackOutputWithContext(ctx context.Context) VRackOutput {
	return o
}

// yourvrackdescription
func (o VRackOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VRack) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// yourvrackname
func (o VRackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VRack) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Details about an Order
func (o VRackOutput) Orders() VRackOrderArrayOutput {
	return o.ApplyT(func(v *VRack) VRackOrderArrayOutput { return v.Orders }).(VRackOrderArrayOutput)
}

// Ovh Subsidiary
func (o VRackOutput) OvhSubsidiary() pulumi.StringOutput {
	return o.ApplyT(func(v *VRack) pulumi.StringOutput { return v.OvhSubsidiary }).(pulumi.StringOutput)
}

// Ovh payment mode (One of "default-payment-mean", "fidelity", "ovh-account")
func (o VRackOutput) PaymentMean() pulumi.StringOutput {
	return o.ApplyT(func(v *VRack) pulumi.StringOutput { return v.PaymentMean }).(pulumi.StringOutput)
}

// Product Plan to order
func (o VRackOutput) Plan() VRackPlanOutput {
	return o.ApplyT(func(v *VRack) VRackPlanOutput { return v.Plan }).(VRackPlanOutput)
}

// Product Plan to order
func (o VRackOutput) PlanOptions() VRackPlanOptionArrayOutput {
	return o.ApplyT(func(v *VRack) VRackPlanOptionArrayOutput { return v.PlanOptions }).(VRackPlanOptionArrayOutput)
}

// The internal name of your vrack
func (o VRackOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VRack) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type VRackArrayOutput struct{ *pulumi.OutputState }

func (VRackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRack)(nil)).Elem()
}

func (o VRackArrayOutput) ToVRackArrayOutput() VRackArrayOutput {
	return o
}

func (o VRackArrayOutput) ToVRackArrayOutputWithContext(ctx context.Context) VRackArrayOutput {
	return o
}

func (o VRackArrayOutput) Index(i pulumi.IntInput) VRackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VRack {
		return vs[0].([]*VRack)[vs[1].(int)]
	}).(VRackOutput)
}

type VRackMapOutput struct{ *pulumi.OutputState }

func (VRackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRack)(nil)).Elem()
}

func (o VRackMapOutput) ToVRackMapOutput() VRackMapOutput {
	return o
}

func (o VRackMapOutput) ToVRackMapOutputWithContext(ctx context.Context) VRackMapOutput {
	return o
}

func (o VRackMapOutput) MapIndex(k pulumi.StringInput) VRackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VRack {
		return vs[0].(map[string]*VRack)[vs[1].(string)]
	}).(VRackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VRackInput)(nil)).Elem(), &VRack{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRackArrayInput)(nil)).Elem(), VRackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRackMapInput)(nil)).Elem(), VRackMap{})
	pulumi.RegisterOutputType(VRackOutput{})
	pulumi.RegisterOutputType(VRackArrayOutput{})
	pulumi.RegisterOutputType(VRackMapOutput{})
}
