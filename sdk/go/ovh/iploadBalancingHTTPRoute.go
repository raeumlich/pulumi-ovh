// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage http route for a loadbalancer service
//
// ## Example Usage
//
// Route which redirect all url to https.
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ovh.NewIPLoadBalancingHTTPRoute(ctx, "httpsredirect", &ovh.IPLoadBalancingHTTPRouteArgs{
// 			Action: &IPLoadBalancingHTTPRouteActionArgs{
// 				Status: pulumi.Int(302),
// 				Target: pulumi.String(fmt.Sprintf("%v%v%v%v", "https://", host, path, arguments)),
// 				Type:   pulumi.String("redirect"),
// 			},
// 			DisplayName: pulumi.String("Redirect to HTTPS"),
// 			ServiceName: pulumi.String("loadbalancer-xxxxxxxxxxxxxxxxxx"),
// 			Weight:      pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPLoadBalancingHTTPRoute struct {
	pulumi.CustomResourceState

	// Action triggered when all rules match
	Action IPLoadBalancingHTTPRouteActionOutput `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId pulumi.IntOutput `pulumi:"frontendId"`
	// List of rules to match to trigger action
	Rules IPLoadBalancingHTTPRouteRuleTypeArrayOutput `pulumi:"rules"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// HTTP status code for "redirect" and "reject" actions
	Status pulumi.StringOutput `pulumi:"status"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewIPLoadBalancingHTTPRoute registers a new resource with the given unique name, arguments, and options.
func NewIPLoadBalancingHTTPRoute(ctx *pulumi.Context,
	name string, args *IPLoadBalancingHTTPRouteArgs, opts ...pulumi.ResourceOption) (*IPLoadBalancingHTTPRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource IPLoadBalancingHTTPRoute
	err := ctx.RegisterResource("ovh:index/iPLoadBalancingHTTPRoute:IPLoadBalancingHTTPRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPLoadBalancingHTTPRoute gets an existing IPLoadBalancingHTTPRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPLoadBalancingHTTPRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPLoadBalancingHTTPRouteState, opts ...pulumi.ResourceOption) (*IPLoadBalancingHTTPRoute, error) {
	var resource IPLoadBalancingHTTPRoute
	err := ctx.ReadResource("ovh:index/iPLoadBalancingHTTPRoute:IPLoadBalancingHTTPRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPLoadBalancingHTTPRoute resources.
type iploadBalancingHTTPRouteState struct {
	// Action triggered when all rules match
	Action *IPLoadBalancingHTTPRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *int `pulumi:"frontendId"`
	// List of rules to match to trigger action
	Rules []IPLoadBalancingHTTPRouteRuleType `pulumi:"rules"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// HTTP status code for "redirect" and "reject" actions
	Status *string `pulumi:"status"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight *int `pulumi:"weight"`
}

type IPLoadBalancingHTTPRouteState struct {
	// Action triggered when all rules match
	Action IPLoadBalancingHTTPRouteActionPtrInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.IntPtrInput
	// List of rules to match to trigger action
	Rules IPLoadBalancingHTTPRouteRuleTypeArrayInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// HTTP status code for "redirect" and "reject" actions
	Status pulumi.StringPtrInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight pulumi.IntPtrInput
}

func (IPLoadBalancingHTTPRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadBalancingHTTPRouteState)(nil)).Elem()
}

type iploadBalancingHTTPRouteArgs struct {
	// Action triggered when all rules match
	Action IPLoadBalancingHTTPRouteAction `pulumi:"action"`
	// Human readable name for your route, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Route traffic for this frontend
	FrontendId *int `pulumi:"frontendId"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a IPLoadBalancingHTTPRoute resource.
type IPLoadBalancingHTTPRouteArgs struct {
	// Action triggered when all rules match
	Action IPLoadBalancingHTTPRouteActionInput
	// Human readable name for your route, this field is for you
	DisplayName pulumi.StringPtrInput
	// Route traffic for this frontend
	FrontendId pulumi.IntPtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight pulumi.IntPtrInput
}

func (IPLoadBalancingHTTPRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iploadBalancingHTTPRouteArgs)(nil)).Elem()
}

type IPLoadBalancingHTTPRouteInput interface {
	pulumi.Input

	ToIPLoadBalancingHTTPRouteOutput() IPLoadBalancingHTTPRouteOutput
	ToIPLoadBalancingHTTPRouteOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteOutput
}

func (*IPLoadBalancingHTTPRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadBalancingHTTPRoute)(nil)).Elem()
}

func (i *IPLoadBalancingHTTPRoute) ToIPLoadBalancingHTTPRouteOutput() IPLoadBalancingHTTPRouteOutput {
	return i.ToIPLoadBalancingHTTPRouteOutputWithContext(context.Background())
}

func (i *IPLoadBalancingHTTPRoute) ToIPLoadBalancingHTTPRouteOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingHTTPRouteOutput)
}

// IPLoadBalancingHTTPRouteArrayInput is an input type that accepts IPLoadBalancingHTTPRouteArray and IPLoadBalancingHTTPRouteArrayOutput values.
// You can construct a concrete instance of `IPLoadBalancingHTTPRouteArrayInput` via:
//
//          IPLoadBalancingHTTPRouteArray{ IPLoadBalancingHTTPRouteArgs{...} }
type IPLoadBalancingHTTPRouteArrayInput interface {
	pulumi.Input

	ToIPLoadBalancingHTTPRouteArrayOutput() IPLoadBalancingHTTPRouteArrayOutput
	ToIPLoadBalancingHTTPRouteArrayOutputWithContext(context.Context) IPLoadBalancingHTTPRouteArrayOutput
}

type IPLoadBalancingHTTPRouteArray []IPLoadBalancingHTTPRouteInput

func (IPLoadBalancingHTTPRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadBalancingHTTPRoute)(nil)).Elem()
}

func (i IPLoadBalancingHTTPRouteArray) ToIPLoadBalancingHTTPRouteArrayOutput() IPLoadBalancingHTTPRouteArrayOutput {
	return i.ToIPLoadBalancingHTTPRouteArrayOutputWithContext(context.Background())
}

func (i IPLoadBalancingHTTPRouteArray) ToIPLoadBalancingHTTPRouteArrayOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingHTTPRouteArrayOutput)
}

// IPLoadBalancingHTTPRouteMapInput is an input type that accepts IPLoadBalancingHTTPRouteMap and IPLoadBalancingHTTPRouteMapOutput values.
// You can construct a concrete instance of `IPLoadBalancingHTTPRouteMapInput` via:
//
//          IPLoadBalancingHTTPRouteMap{ "key": IPLoadBalancingHTTPRouteArgs{...} }
type IPLoadBalancingHTTPRouteMapInput interface {
	pulumi.Input

	ToIPLoadBalancingHTTPRouteMapOutput() IPLoadBalancingHTTPRouteMapOutput
	ToIPLoadBalancingHTTPRouteMapOutputWithContext(context.Context) IPLoadBalancingHTTPRouteMapOutput
}

type IPLoadBalancingHTTPRouteMap map[string]IPLoadBalancingHTTPRouteInput

func (IPLoadBalancingHTTPRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadBalancingHTTPRoute)(nil)).Elem()
}

func (i IPLoadBalancingHTTPRouteMap) ToIPLoadBalancingHTTPRouteMapOutput() IPLoadBalancingHTTPRouteMapOutput {
	return i.ToIPLoadBalancingHTTPRouteMapOutputWithContext(context.Background())
}

func (i IPLoadBalancingHTTPRouteMap) ToIPLoadBalancingHTTPRouteMapOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPLoadBalancingHTTPRouteMapOutput)
}

type IPLoadBalancingHTTPRouteOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingHTTPRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPLoadBalancingHTTPRoute)(nil)).Elem()
}

func (o IPLoadBalancingHTTPRouteOutput) ToIPLoadBalancingHTTPRouteOutput() IPLoadBalancingHTTPRouteOutput {
	return o
}

func (o IPLoadBalancingHTTPRouteOutput) ToIPLoadBalancingHTTPRouteOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteOutput {
	return o
}

// Action triggered when all rules match
func (o IPLoadBalancingHTTPRouteOutput) Action() IPLoadBalancingHTTPRouteActionOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRoute) IPLoadBalancingHTTPRouteActionOutput { return v.Action }).(IPLoadBalancingHTTPRouteActionOutput)
}

// Human readable name for your route, this field is for you
func (o IPLoadBalancingHTTPRouteOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRoute) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Route traffic for this frontend
func (o IPLoadBalancingHTTPRouteOutput) FrontendId() pulumi.IntOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRoute) pulumi.IntOutput { return v.FrontendId }).(pulumi.IntOutput)
}

// List of rules to match to trigger action
func (o IPLoadBalancingHTTPRouteOutput) Rules() IPLoadBalancingHTTPRouteRuleTypeArrayOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRoute) IPLoadBalancingHTTPRouteRuleTypeArrayOutput { return v.Rules }).(IPLoadBalancingHTTPRouteRuleTypeArrayOutput)
}

// The internal name of your IP load balancing
func (o IPLoadBalancingHTTPRouteOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRoute) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// HTTP status code for "redirect" and "reject" actions
func (o IPLoadBalancingHTTPRouteOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRoute) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
func (o IPLoadBalancingHTTPRouteOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *IPLoadBalancingHTTPRoute) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type IPLoadBalancingHTTPRouteArrayOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingHTTPRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPLoadBalancingHTTPRoute)(nil)).Elem()
}

func (o IPLoadBalancingHTTPRouteArrayOutput) ToIPLoadBalancingHTTPRouteArrayOutput() IPLoadBalancingHTTPRouteArrayOutput {
	return o
}

func (o IPLoadBalancingHTTPRouteArrayOutput) ToIPLoadBalancingHTTPRouteArrayOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteArrayOutput {
	return o
}

func (o IPLoadBalancingHTTPRouteArrayOutput) Index(i pulumi.IntInput) IPLoadBalancingHTTPRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPLoadBalancingHTTPRoute {
		return vs[0].([]*IPLoadBalancingHTTPRoute)[vs[1].(int)]
	}).(IPLoadBalancingHTTPRouteOutput)
}

type IPLoadBalancingHTTPRouteMapOutput struct{ *pulumi.OutputState }

func (IPLoadBalancingHTTPRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPLoadBalancingHTTPRoute)(nil)).Elem()
}

func (o IPLoadBalancingHTTPRouteMapOutput) ToIPLoadBalancingHTTPRouteMapOutput() IPLoadBalancingHTTPRouteMapOutput {
	return o
}

func (o IPLoadBalancingHTTPRouteMapOutput) ToIPLoadBalancingHTTPRouteMapOutputWithContext(ctx context.Context) IPLoadBalancingHTTPRouteMapOutput {
	return o
}

func (o IPLoadBalancingHTTPRouteMapOutput) MapIndex(k pulumi.StringInput) IPLoadBalancingHTTPRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPLoadBalancingHTTPRoute {
		return vs[0].(map[string]*IPLoadBalancingHTTPRoute)[vs[1].(string)]
	}).(IPLoadBalancingHTTPRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingHTTPRouteInput)(nil)).Elem(), &IPLoadBalancingHTTPRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingHTTPRouteArrayInput)(nil)).Elem(), IPLoadBalancingHTTPRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPLoadBalancingHTTPRouteMapInput)(nil)).Elem(), IPLoadBalancingHTTPRouteMap{})
	pulumi.RegisterOutputType(IPLoadBalancingHTTPRouteOutput{})
	pulumi.RegisterOutputType(IPLoadBalancingHTTPRouteArrayOutput{})
	pulumi.RegisterOutputType(IPLoadBalancingHTTPRouteMapOutput{})
}
