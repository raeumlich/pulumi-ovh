// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach a Ip block to a VRack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-ovh/sdk/go/ovh"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		mycart, err := ovh.GetOrderCart(ctx, &GetOrderCartArgs{
// 			OvhSubsidiary: "fr",
// 			Description:   pulumi.StringRef("my cart"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		vrackProductCartProductPlan, err := ovh.GetProductCartProductPlan(ctx, &GetProductCartProductPlanArgs{
// 			CartId:        mycart.Id,
// 			PriceCapacity: "renew",
// 			Product:       "vrack",
// 			PlanCode:      "vrack",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		vrackVRack, err := ovh.NewVRack(ctx, "vrackVRack", &ovh.VRackArgs{
// 			Description:   pulumi.String(mycart.Description),
// 			OvhSubsidiary: pulumi.String(mycart.OvhSubsidiary),
// 			PaymentMean:   pulumi.String("fidelity"),
// 			Plan: &VRackPlanArgs{
// 				Duration:    pulumi.String(vrackProductCartProductPlan.SelectedPrices[0].Duration),
// 				PlanCode:    pulumi.String(vrackProductCartProductPlan.PlanCode),
// 				PricingMode: pulumi.String(vrackProductCartProductPlan.SelectedPrices[0].PricingMode),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ipblockProductCartProductPlan, err := ovh.GetProductCartProductPlan(ctx, &GetProductCartProductPlanArgs{
// 			CartId:        mycart.Id,
// 			PriceCapacity: "renew",
// 			Product:       "ip",
// 			PlanCode:      "ip-v4-s30-ripe",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ipblockIPService, err := ovh.NewIPService(ctx, "ipblockIPService", &ovh.IPServiceArgs{
// 			OvhSubsidiary: pulumi.String(mycart.OvhSubsidiary),
// 			PaymentMean:   pulumi.String("ovh-account"),
// 			Description:   pulumi.String(mycart.Description),
// 			Plan: &IPServicePlanArgs{
// 				Duration:    pulumi.String(ipblockProductCartProductPlan.SelectedPrices[0].Duration),
// 				PlanCode:    pulumi.String(ipblockProductCartProductPlan.PlanCode),
// 				PricingMode: pulumi.String(ipblockProductCartProductPlan.SelectedPrices[0].PricingMode),
// 				Configurations: IPServicePlanConfigurationArray{
// 					&IPServicePlanConfigurationArgs{
// 						Label: pulumi.String("country"),
// 						Value: pulumi.String("FR"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ovh.NewVRackIP(ctx, "vrackblock", &ovh.VRackIPArgs{
// 			ServiceName: vrackVRack.ServiceName,
// 			Block:       ipblockIPService.Ip,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VRackIP struct {
	pulumi.CustomResourceState

	// Your IP block.
	Block pulumi.StringOutput `pulumi:"block"`
	// Your gateway
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Your IP block
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The internal name of your vrack
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Where you want your block announced on the network
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewVRackIP registers a new resource with the given unique name, arguments, and options.
func NewVRackIP(ctx *pulumi.Context,
	name string, args *VRackIPArgs, opts ...pulumi.ResourceOption) (*VRackIP, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Block == nil {
		return nil, errors.New("invalid value for required argument 'Block'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource VRackIP
	err := ctx.RegisterResource("ovh:index/vRackIP:VRackIP", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVRackIP gets an existing VRackIP resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVRackIP(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VRackIPState, opts ...pulumi.ResourceOption) (*VRackIP, error) {
	var resource VRackIP
	err := ctx.ReadResource("ovh:index/vRackIP:VRackIP", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VRackIP resources.
type vrackIPState struct {
	// Your IP block.
	Block *string `pulumi:"block"`
	// Your gateway
	Gateway *string `pulumi:"gateway"`
	// Your IP block
	Ip *string `pulumi:"ip"`
	// The internal name of your vrack
	ServiceName *string `pulumi:"serviceName"`
	// Where you want your block announced on the network
	Zone *string `pulumi:"zone"`
}

type VRackIPState struct {
	// Your IP block.
	Block pulumi.StringPtrInput
	// Your gateway
	Gateway pulumi.StringPtrInput
	// Your IP block
	Ip pulumi.StringPtrInput
	// The internal name of your vrack
	ServiceName pulumi.StringPtrInput
	// Where you want your block announced on the network
	Zone pulumi.StringPtrInput
}

func (VRackIPState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIPState)(nil)).Elem()
}

type vrackIPArgs struct {
	// Your IP block.
	Block string `pulumi:"block"`
	// The internal name of your vrack
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VRackIP resource.
type VRackIPArgs struct {
	// Your IP block.
	Block pulumi.StringInput
	// The internal name of your vrack
	ServiceName pulumi.StringInput
}

func (VRackIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIPArgs)(nil)).Elem()
}

type VRackIPInput interface {
	pulumi.Input

	ToVRackIPOutput() VRackIPOutput
	ToVRackIPOutputWithContext(ctx context.Context) VRackIPOutput
}

func (*VRackIP) ElementType() reflect.Type {
	return reflect.TypeOf((**VRackIP)(nil)).Elem()
}

func (i *VRackIP) ToVRackIPOutput() VRackIPOutput {
	return i.ToVRackIPOutputWithContext(context.Background())
}

func (i *VRackIP) ToVRackIPOutputWithContext(ctx context.Context) VRackIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackIPOutput)
}

// VRackIPArrayInput is an input type that accepts VRackIPArray and VRackIPArrayOutput values.
// You can construct a concrete instance of `VRackIPArrayInput` via:
//
//          VRackIPArray{ VRackIPArgs{...} }
type VRackIPArrayInput interface {
	pulumi.Input

	ToVRackIPArrayOutput() VRackIPArrayOutput
	ToVRackIPArrayOutputWithContext(context.Context) VRackIPArrayOutput
}

type VRackIPArray []VRackIPInput

func (VRackIPArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRackIP)(nil)).Elem()
}

func (i VRackIPArray) ToVRackIPArrayOutput() VRackIPArrayOutput {
	return i.ToVRackIPArrayOutputWithContext(context.Background())
}

func (i VRackIPArray) ToVRackIPArrayOutputWithContext(ctx context.Context) VRackIPArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackIPArrayOutput)
}

// VRackIPMapInput is an input type that accepts VRackIPMap and VRackIPMapOutput values.
// You can construct a concrete instance of `VRackIPMapInput` via:
//
//          VRackIPMap{ "key": VRackIPArgs{...} }
type VRackIPMapInput interface {
	pulumi.Input

	ToVRackIPMapOutput() VRackIPMapOutput
	ToVRackIPMapOutputWithContext(context.Context) VRackIPMapOutput
}

type VRackIPMap map[string]VRackIPInput

func (VRackIPMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRackIP)(nil)).Elem()
}

func (i VRackIPMap) ToVRackIPMapOutput() VRackIPMapOutput {
	return i.ToVRackIPMapOutputWithContext(context.Background())
}

func (i VRackIPMap) ToVRackIPMapOutputWithContext(ctx context.Context) VRackIPMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VRackIPMapOutput)
}

type VRackIPOutput struct{ *pulumi.OutputState }

func (VRackIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VRackIP)(nil)).Elem()
}

func (o VRackIPOutput) ToVRackIPOutput() VRackIPOutput {
	return o
}

func (o VRackIPOutput) ToVRackIPOutputWithContext(ctx context.Context) VRackIPOutput {
	return o
}

// Your IP block.
func (o VRackIPOutput) Block() pulumi.StringOutput {
	return o.ApplyT(func(v *VRackIP) pulumi.StringOutput { return v.Block }).(pulumi.StringOutput)
}

// Your gateway
func (o VRackIPOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *VRackIP) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Your IP block
func (o VRackIPOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *VRackIP) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// The internal name of your vrack
func (o VRackIPOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VRackIP) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Where you want your block announced on the network
func (o VRackIPOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *VRackIP) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type VRackIPArrayOutput struct{ *pulumi.OutputState }

func (VRackIPArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VRackIP)(nil)).Elem()
}

func (o VRackIPArrayOutput) ToVRackIPArrayOutput() VRackIPArrayOutput {
	return o
}

func (o VRackIPArrayOutput) ToVRackIPArrayOutputWithContext(ctx context.Context) VRackIPArrayOutput {
	return o
}

func (o VRackIPArrayOutput) Index(i pulumi.IntInput) VRackIPOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VRackIP {
		return vs[0].([]*VRackIP)[vs[1].(int)]
	}).(VRackIPOutput)
}

type VRackIPMapOutput struct{ *pulumi.OutputState }

func (VRackIPMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VRackIP)(nil)).Elem()
}

func (o VRackIPMapOutput) ToVRackIPMapOutput() VRackIPMapOutput {
	return o
}

func (o VRackIPMapOutput) ToVRackIPMapOutputWithContext(ctx context.Context) VRackIPMapOutput {
	return o
}

func (o VRackIPMapOutput) MapIndex(k pulumi.StringInput) VRackIPOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VRackIP {
		return vs[0].(map[string]*VRackIP)[vs[1].(string)]
	}).(VRackIPOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VRackIPInput)(nil)).Elem(), &VRackIP{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRackIPArrayInput)(nil)).Elem(), VRackIPArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VRackIPMapInput)(nil)).Elem(), VRackIPMap{})
	pulumi.RegisterOutputType(VRackIPOutput{})
	pulumi.RegisterOutputType(VRackIPArrayOutput{})
	pulumi.RegisterOutputType(VRackIPMapOutput{})
}
